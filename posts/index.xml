<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Ricky</title><link>https://linzeyan.github.io/posts/</link><description>Recent content in Posts on Ricky</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 11 Feb 2025 15:06:00 +0800</lastBuildDate><atom:link href="https://linzeyan.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuring SSH Keys for Multiple GitHub Accounts</title><link>https://linzeyan.github.io/posts/20250211configure-ssh-keys-for-multiple-github-accounts/</link><pubDate>Tue, 11 Feb 2025 15:06:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20250211configure-ssh-keys-for-multiple-github-accounts/</guid><description>Configuring SSH Keys for Multiple GitHub Accounts
Use Different Host values Host github.com HostName github.com User git IdentityFile ~/.ssh/id_fry_ed25519 Host github-plnx HostName github.com User git IdentityFile ~/.ssh/id_fry_plnx_ed25519 # Instead of the actual URL $ git clone git@github.com:planet-express/delivery_service.git # Substitue in our custom Host value for the `github.com` part $ git clone git@github-plnx:planet-express/delivery_service.git Automate Substituting the Host [include] path = ~/.gitconfig_custom # See custom `Host github-plnx` in ~/.ssh/config [url &amp;#34;github-plnx:planet-express&amp;#34;] insteadOf = git@github.</description></item><item><title>iTerm2 features I find useful</title><link>https://linzeyan.github.io/posts/20250209iterm2-features-i-find-useful/</link><pubDate>Sun, 09 Feb 2025 08:52:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20250209iterm2-features-i-find-useful/</guid><description>iTerm2 features I find useful
Show Timestamps ==&amp;gt; ⌘+Shift+E Alert on next prompt ==&amp;gt; ⌘+Option+A Jump between prompts ==&amp;gt; ⌘+Shift+Down Hotkeys to scroll one line at a time ==&amp;gt; ⌘+Up and ⌘+Down Rearrange tabs with hotkeys ==&amp;gt; Ctrl+Shift+B and Ctrl+Shift+F</description></item><item><title>GraphQL Introspection Query</title><link>https://linzeyan.github.io/posts/20250102gql-introspection-query/</link><pubDate>Thu, 02 Jan 2025 15:32:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20250102gql-introspection-query/</guid><description>query IntrospectionQuery { __schema { queryType { name } mutationType { name } subscriptionType { name } types { ...FullType } directives { name description locations args { ...InputValue } } } } fragment FullType on __Type { kind name description fields(includeDeprecated: true) { name description args { ...InputValue } type { ...TypeRef } isDeprecated deprecationReason } inputFields { ...InputValue } interfaces { ...TypeRef } enumValues(includeDeprecated: true) { name description isDeprecated deprecationReason } possibleTypes { .</description></item><item><title>Rules that terminal programs follow</title><link>https://linzeyan.github.io/posts/20241225terminal-rules/</link><pubDate>Wed, 25 Dec 2024 08:45:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20241225terminal-rules/</guid><description>&amp;ldquo;Rules&amp;rdquo; that terminal programs follow
rule 1: noninteractive programs should quit when you press Ctrl-C rule 2: TUIs should quit when you press q rule 3: REPLs should quit when you press Ctrl-D on an empty line rule 4: don&amp;rsquo;t use more than 16 colours rule 5: vaguely support readline keybindings rule 5.1: Ctrl-W should delete the last word rule 6: disable colours when writing to a pipe rule 7: - means stdin/stdout</description></item><item><title>Smarter than 'Ctrl+F': Linking Directly to Web Page Content</title><link>https://linzeyan.github.io/posts/20241225linking-directly-to-web-page-content/</link><pubDate>Wed, 25 Dec 2024 08:45:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20241225linking-directly-to-web-page-content/</guid><description>Smarter than &amp;lsquo;Ctrl+F&amp;rsquo;: Linking Directly to Web Page Content
syntax
https://example.com/page.html#:~:text=[prefix-,]textStart[,textEnd][,-suffix]
example
https://developer.mozilla.org/en-US/docs/Web/URI/Fragment/Text_fragments#:~:text=without%20relying%20on%20the%20presence%20of%20IDs</description></item><item><title>Mac 小众软件推荐与工作流分享(2024)</title><link>https://linzeyan.github.io/posts/20241114mac-app-share/</link><pubDate>Thu, 14 Nov 2024 09:52:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20241114mac-app-share/</guid><description>Mac 小众软件推荐与工作流分享(2024)</description></item><item><title>Objective-See: 一个关于 Apple 设备隐私与安全的开源项目组织</title><link>https://linzeyan.github.io/posts/20241113objective-see/</link><pubDate>Wed, 13 Nov 2024 09:44:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20241113objective-see/</guid><description>Objective-See: 一个关于 Apple 设备隐私与安全的开源项目组织 今天搜小工具的时候发现他们做了一堆 macOS 上的开源软件，基本都是和隐私与安全相关的。
KnockKnock: 查看你的 Mac 上有哪些后台进程、守护进程、启动项、内核扩展、登录项、浏览器插件等等。能看到的比那个「Login Items」详细的多（有的软件通过其他方式自启动）
LuLu: 一个开源的 macOS 上的网络防火墙，可以让你详细的控制每个软件的网络连接。（类似 Hands Off!）
TaskExplorer: 一个增强版的任务管理器，可以看到应用的签名、打开的文件、网络连接等等，还可以根据 sha256 自动帮你搜索 VirusTotal 结果。
Do Not Disturb: 可以阻止你的 Mac 被打扰（没错），当你的 Mac 被别人打开盖子时可以发送警告、执行脚本、检测设备变化之类的。
BlockBlock: 可以阻止后台的持久化安装，RansomWhere 可以检测文件被加密的行为，还有一些杂七杂八的独立工具。
https://objective-see.org</description></item><item><title>Advanced Shell Scripting Techniques: Automating Complex Tasks with Bash</title><link>https://linzeyan.github.io/posts/20240925advanced-shell-scripting/</link><pubDate>Wed, 25 Sep 2024 09:23:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20240925advanced-shell-scripting/</guid><description>Advanced Shell Scripting Techniques: Automating Complex Tasks with Bash Advanced Shell Scripting Techniques: Automating Complex Tasks with Bash Use Built-in Commands Built-in commands execute faster because they don&amp;rsquo;t require loading an external process. Minimize Subshells Subshells can be expensive in terms of performance. # Inefficient output=$(cat file.txt) # Efficient output=$(&amp;lt;file.txt) Use Arrays for Bulk Data When handling a large amount of data, arrays can be more efficient and easier to manage than multiple variables.</description></item><item><title>Google Infra</title><link>https://linzeyan.github.io/posts/20240924google-infra/</link><pubDate>Tue, 24 Sep 2024 09:04:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20240924google-infra/</guid><description>Google Infra Google&amp;rsquo;s 5-generation network architecture in ten years</description></item><item><title>Supply chain attack</title><link>https://linzeyan.github.io/posts/20240913golang/</link><pubDate>Fri, 13 Sep 2024 09:41:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20240913golang/</guid><description>Go articles 提高警惕，供应链攻击就在你我身边 github.com/siruspen/logrus false github.com/sirupsen/logrus true</description></item><item><title>Lightweight Linux Distributions For Older PCs</title><link>https://linzeyan.github.io/posts/20240820linux/</link><pubDate>Tue, 20 Aug 2024 12:38:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20240820linux/</guid><description>https://www.freecodecamp.org/news/lightweight-linux-distributions-for-your-pc/
Name Site Comment Puppy Linux https://puppylinux-woof-ce.github.io/ This tiny OS weighs in at under 300MB, so it can run smoothly even on systems with as little as 512MB of RAM. Bodhi Linux https://www.bodhilinux.com/ System requirements are just 512MB of RAM and a 500MHz processor. Peppermint OS https://peppermintos.com/ It only needs 512MB of RAM to run, so it will fly on that Pentium 4 machine or Core 2 Duo laptop you have stashed in your closet.</description></item><item><title>Go articles</title><link>https://linzeyan.github.io/posts/20240820golang/</link><pubDate>Tue, 20 Aug 2024 08:55:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20240820golang/</guid><description>Go articles 学会 gin 参数校验之 validator 库，看这一篇就足够了 字符串约束 excludesall：不包含参数中任意的 UNICODE 字符，例如 excludesall=ab
excludesrune：不包含参数表示的 rune 字符，excludesrune=asong
startswith：以参数子串为前缀，例如 startswith=hi
endswith：以参数子串为后缀，例如 endswith=bye。
contains=：包含参数子串，例如 contains=email
containsany：包含参数中任意的 UNICODE 字符，例如 containsany=ab
containsrune：包含参数表示的 rune 字符，例如`containsrune=asong
excludes：不包含参数子串，例如 excludes=email
范围约束 范围约束的字段类型分为三种：
对于数值，我们则可以约束其值 对于切片、数组和 map，我们则可以约束其长度 对于字符串，我们则可以约束其长度
常用 tag 介绍： ne：不等于参数值，例如 ne=5 gt：大于参数值，例如 gt=5 gte：大于等于参数值，例如 gte=50 lt：小于参数值，例如 lt=50 lte：小于等于参数值，例如 lte=50 oneof：只能是列举出的值其中一个，这些值必须是数值或字符串，以空格分隔，如果字符串中有空格，将字符串用单引号包围，例如 oneof=male female。 eq：等于参数值，注意与 len 不同。对于字符串，eq 约束字符串本身的值，而 len 约束字符串长度。例如 eq=10 len：等于参数值，例如 len=10 max：小于等于参数值，例如 max=10 min：大于等于参数值，例如 min=10
Fields 约束 eqfield：定义字段间的相等约束，用于约束同一结构体中的字段。例如：eqfield=Password eqcsfield：约束统一结构体中字段等于另一个字段（相对），确认密码时可以使用，例如：eqfiel=ConfirmPassword nefield：用来约束两个字段是否相同，确认两种颜色是否一致时可以使用，例如：nefield=Color1 necsfield：约束两个字段是否相同（相对）</description></item><item><title>Git force push</title><link>https://linzeyan.github.io/posts/20240726git/</link><pubDate>Fri, 26 Jul 2024 12:24:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20240726git/</guid><description>https://www.jvt.me/posts/2021/10/23/undo-force-push/ https://www.jvt.me/posts/2018/09/18/safely-force-git-push/
git push --force-with-lease</description></item><item><title>Go leetcode</title><link>https://linzeyan.github.io/posts/20240620leetcode/</link><pubDate>Thu, 20 Jun 2024 18:15:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20240620leetcode/</guid><description>https://books.halfrost.com/leetcode/</description></item><item><title>Emoji Regular expression</title><link>https://linzeyan.github.io/posts/20240519emoji-regexp/</link><pubDate>Sun, 19 May 2024 14:37:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20240519emoji-regexp/</guid><description>Emoji Regular expression /\p{Emoji}/u
既然是匹配 Emoji，那么 loneProperty (\p{loneProperty}) 就应该是 Emoji ? 实际测试并不符合需求，因为在 Emoji 官方文档中， 123456789*# 也是被看作是 Emoji， 如果用这个正则的话，就会把数字也认为是 Emoji，不符合只排除特殊表情的要求。
/\p{Extended_Pictographic}/u
而 Extended_Pictographic 表示的 Emoji 才是我们认为的那些表情符号。</description></item><item><title>Prometheus relabeling and linux metrics</title><link>https://linzeyan.github.io/posts/20240514prometheus/</link><pubDate>Tue, 14 May 2024 13:49:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20240514prometheus/</guid><description>Prometheus relabeling and linux metrics Adding new label
- target_label: &amp;#34;foo&amp;#34; replacement: &amp;#34;bar&amp;#34; metrics
rkB/s: rate(node_disk_read_bytes_total[*]) Unit: bytes per second wkB/s: rate(node_disk_written_bytes_total[*]) Unit: bytes per second Reference How to use relabeling in Prometheus and VictoriaMetrics Interpreting Prometheus metrics for Linux disk I/O utilization</description></item><item><title>LLMs Hackmd Docs</title><link>https://linzeyan.github.io/posts/20240510llm/</link><pubDate>Fri, 10 May 2024 10:08:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20240510llm/</guid><description>LLMs Hackmd Docs LM STUDIO chromadb/chroma ollama/ollama mintplexlabs/anythingllm References 大型語言模型 LLMs 課程教學 課程大綱 (四) 大型語言模型 LLMs 課程教學 課程大綱 (五) 大型語言模型 LLMs 課程教學 課程大綱 (六)</description></item><item><title>Taide - training data</title><link>https://linzeyan.github.io/posts/20240427taide/</link><pubDate>Sat, 27 Apr 2024 17:10:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20240427taide/</guid><description>Taide - training data</description></item><item><title>Run llama3</title><link>https://linzeyan.github.io/posts/20240425ollama/</link><pubDate>Thu, 25 Apr 2024 10:14:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20240425ollama/</guid><description>ollama Instructions Docker-compose version: &amp;#34;3.8&amp;#34; services: ollama: image: ollama/ollama:latest container_name: ollama restart: unless-stopped volumes: - ./ollama/ollama:/root/.ollama tty: true ports: - 11434:11434 networks: - ollama-docker # deploy: # resources: # reservations: # devices: # - driver: nvidia # count: 1 # capabilities: [gpu] ollama-webui: image: ghcr.io/ollama-webui/ollama-webui:main container_name: ollama-webui restart: unless-stopped volumes: - ./ollama/ollama-webui:/app/backend/data ports: - 8080:8080 environment: - &amp;#34;/ollama/api=http://ollama:11434/api&amp;#34; extra_hosts: - host.docker.internal:host-gateway networks: - ollama-docker networks: ollama-docker: Setup # Run docker-compose docker-compose up -d # Pull model(https://ollama.</description></item><item><title>一文读不懂的 Go 1.21 GA 的 PGO 优化——一次在 WebP Server Go 上的尝试</title><link>https://linzeyan.github.io/posts/20240425pgo/</link><pubDate>Thu, 25 Apr 2024 09:22:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20240425pgo/</guid><description>一文读不懂的 Go 1.21 GA 的 PGO 优化——一次在 WebP Server Go 上的尝试</description></item><item><title>Go Style Decisions - Pass values</title><link>https://linzeyan.github.io/posts/20240413decisions-pass-values/</link><pubDate>Sat, 13 Apr 2024 17:38:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20240413decisions-pass-values/</guid><description>Go Style Decisions - Pass values Do not pass pointers as function arguments just to save a few bytes. If a function reads its argument x only as *x throughout, then the argument shouldn&amp;rsquo;t be a pointer. Common instances of this include passing a pointer to a string (*string) or a pointer to an interface value (*io.Reader). In both cases, the value itself is a fixed size and can be passed directly.</description></item><item><title>LLM Visualization</title><link>https://linzeyan.github.io/posts/20240121llm/</link><pubDate>Sun, 21 Jan 2024 12:40:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20240121llm/</guid><description>LLM Visualization Github</description></item><item><title>A python script that allows your terminal to snow.</title><link>https://linzeyan.github.io/posts/20231224snow/</link><pubDate>Sun, 24 Dec 2023 15:40:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20231224snow/</guid><description>A python script that allows your terminal to snow. docker run --rm -ti sontek/snowmachine tree --color rainbow --particle &amp;#34;*&amp;#34; --snow true --lights-color rainbow</description></item><item><title>Add SFTP user and share directory</title><link>https://linzeyan.github.io/posts/20231130sftp/</link><pubDate>Thu, 30 Nov 2023 17:22:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20231130sftp/</guid><description>Add SFTP user and share directory dev_test_user, qa_test_user 同權限 dev_user, qa_user 同權限
1. 建立共享資料夾(SFTP 使用的資料夾) sudo mkdir -p /home/{test,prod}/{exchange,upload} sudo mkdir -p /home/{test,prod}/exchange/success sudo mkdir -p /home/{test,prod}/upload/backup 2. 建立使用者群組 sudo groupadd share01-test sudo groupadd share01-prod 3. 創建 qa_test_user 使用者並設定 qa_test_user 使用者的群組為 share01-test sudo useradd -m -G share01-test qa_test_user # 設定 dev_test_user 使用者的群組為 share01-test sudo usermod -G share01-test dev_test_user # 設定密碼 sudo passwd qa_test_user 4. 創建 qa_user 使用者並設定 qa_user 使用者的群組為 share01-prod sudo useradd -m -G share01-prod qa_user # 設定 dev_user 使用者的群組為 share01-prod sudo usermod -G share01-prod dev_user # 設定密碼 sudo passwd qa_user 5.</description></item><item><title>Use terminal and SSH to remote host</title><link>https://linzeyan.github.io/posts/20231124ssh/</link><pubDate>Fri, 24 Nov 2023 22:22:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20231124ssh/</guid><description>Use terminal and SSH to remote host 1. Modern Terminals Hyper iTerm2 Tabby Warp Wez&amp;rsquo;s Terminal WindTerm 2. Open terminal in macOS ⌘ + space open Spotlight search terminal.app press ↩ 3. SSH to remote host ensure the private key file path. enter the command in the terminal: ssh -i /path/to/private_key.pem ubuntu@ubuntu.host.com</description></item><item><title>Fetch GraphQL schema information</title><link>https://linzeyan.github.io/posts/20231018graphql/</link><pubDate>Wed, 18 Oct 2023 20:56:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20231018graphql/</guid><description>curl \ -XPOST \ -H &amp;#34;Content-Type: application/json&amp;#34; \ -d &amp;#39;{&amp;#34;query&amp;#34;:&amp;#34;{__schema { types { name enumValues { name } fields { name type {name kind enumValues { name } ofType { name kind ofType {name kind}}}}}}}&amp;#34;}&amp;#39; \ https://example.com/graphql</description></item><item><title>Container security fundamentals</title><link>https://linzeyan.github.io/posts/20231004container/</link><pubDate>Wed, 04 Oct 2023 09:06:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20231004container/</guid><description>Container security fundamentals</description></item><item><title>Tuning EMQX to Scale to One Million Concurrent Connection on Kubernetes</title><link>https://linzeyan.github.io/posts/20230927mqtt/</link><pubDate>Wed, 27 Sep 2023 10:36:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20230927mqtt/</guid><description>Reference Tuning EMQX to Scale to One Million Concurrent Connection on Kubernetes Performance Tuning (Linux) 矽谷牛的耕田筆記 Note Linux Kernel Tuning node level, basically the non-namespaced sysctls # Sets the maximum number of file handles allowed by the kernel sysctl -w fs.file-max=2097152 # Sets the maximum number of open file descriptors that a process can have sysctl -w fs.nr_open=2097152 namespaced sysctls # Sets the maximum number of connections that can be queued for acceptance by the kernel.</description></item><item><title>Install Chrome OS</title><link>https://linzeyan.github.io/posts/20230927chromeos/</link><pubDate>Wed, 27 Sep 2023 09:36:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20230927chromeos/</guid><description>老電腦別丟掉！安裝 Google 免費作業系統安裝教學（Chrome OS Flex /CloudReady）</description></item><item><title>永齡基金會AI大師論壇:人工智慧如何形塑人類未來</title><link>https://linzeyan.github.io/posts/20230927ai/</link><pubDate>Wed, 27 Sep 2023 09:36:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20230927ai/</guid><description>https://www.youtube.com/watch?v=M3z6gI1AEns</description></item><item><title>Golang tips</title><link>https://linzeyan.github.io/posts/20230926golang/</link><pubDate>Tue, 26 Sep 2023 22:15:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20230926golang/</guid><description>Go 语言是一个高性能的语言，但并不是说这样我们就不用关心性能了，我们还是需要关心的。下面是一个在编程方面和性能相关的提示。
如果需要把数字转字符串，使用 strconv.Itoa() 会比 fmt.Sprintf() 要快一倍左右 尽可能地避免把 String 转成[]Byte 。这个转换会导致性能下降。 如果在 for-loop 里对某个 slice 使用 append()请先把 slice 的容量很扩充到位，这样可以避免内存重新分享以及系统自动按 2 的 N 次方幂进行扩展但又用不到，从而浪费内存。 使用 StringBuffer 或是 StringBuild 来拼接字符串，会比使用 + 或 += 性能高三到四个数量级。 尽可能的使用并发的 go routine，然后使用 sync.WaitGroup 来同步分片操作 避免在热代码中进行内存分配，这样会导致 gc 很忙。尽可能的使用 sync.Pool 来重用对象。 使用 lock-free 的操作，避免使用 mutex，尽可能使用 sync/Atomic 包。 （关于无锁编程的相关话题，可参看《无锁队列实现》或《无锁 Hashmap 实现》） 使用 I/O 缓冲，I/O 是个非常非常慢的操作，使用 bufio.NewWrite() 和 bufio.NewReader() 可以带来更高的性能。 对于在 for-loop 里的固定的正则表达式，一定要使用 regexp.Compile() 编译正则表达式。性能会得升两个数量级。 如果你需要更高性能的协议，你要考虑使用 protobuf 或 msgp 而不是 JSON，因为 JSON 的序列化和反序列化里使用了反射。 你在使用 map 的时候，使用整型的 key 会比字符串的要快，因为整型比较比字符串比较要快。 Reference GO 编程模式：切片，接口，时间和性能</description></item><item><title>datavizproject</title><link>https://linzeyan.github.io/posts/20230926datavizproject/</link><pubDate>Tue, 26 Sep 2023 13:29:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20230926datavizproject/</guid><description>https://datavizproject.com</description></item><item><title>朋友旅行防止絕交檢查表</title><link>https://linzeyan.github.io/posts/20230926checklist/</link><pubDate>Tue, 26 Sep 2023 13:29:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20230926checklist/</guid><description>https://travel-questions.gnehs.net/</description></item><item><title>Cloudflare Zero Trust</title><link>https://linzeyan.github.io/posts/20230926cloudflare/</link><pubDate>Tue, 26 Sep 2023 09:01:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20230926cloudflare/</guid><description>Connect private networks 1. Set up the client Create device enrollment rules Create device enrollment rules to determine which devices can enroll to Zero Trust organization.
Set device enrollment permissions In Zero Trust, go to Settings &amp;gt; WARP Client &amp;gt; Device enrollment &amp;gt; Device enrollment permissions &amp;gt; Manage. Rules &amp;gt; Policies &amp;gt; Add a rule &amp;gt; Include &amp;gt; Selector &amp;gt; Emails ending in &amp;gt; Value &amp;gt; @ruru910.com. 2. Route private network IPs through WARP In Zero Trust, go to Settings &amp;gt; WARP Client &amp;gt; Device settings &amp;gt; Profile settings &amp;gt; Profile name &amp;gt; Default &amp;gt; Configure.</description></item><item><title>Cloudflare tunnel on Synology</title><link>https://linzeyan.github.io/posts/20230925cloudflare/</link><pubDate>Mon, 25 Sep 2023 22:01:00 +0800</pubDate><guid>https://linzeyan.github.io/posts/20230925cloudflare/</guid><description>Setup Synology Create a directory in docker directory, such as cloudflare-tunnel. Download cloudflared/cloudflared image to registry. ssh to admin@synology Change cloudflare-tunnel owner, sudo chown -R 65532:65532 /volume1/docker/cloudflare-tunnel. Run containers - cloudflared tunnel login Run container and mount volume docker/cloudflare-tunnel:/home/nonroot/.cloudflared. Select Use the same network as Docker Host in network tab. Add command tunnel login in envorinment tab. Go to container log, and copy login url. Paste url to browser and authorize the zone.</description></item><item><title>Nginx notes</title><link>https://linzeyan.github.io/posts/20211119nginx/</link><pubDate>Fri, 19 Nov 2021 14:35:58 +0800</pubDate><guid>https://linzeyan.github.io/posts/20211119nginx/</guid><description>Record Nginx configuration file and explanation. files structure . ├── geoip.conf ├── nginx.conf ├── sites-available │ ├── default.conf ├── sites-enabled │ ├── default.conf -&amp;gt; ../sites-available/default.conf ├── upstream.conf geoip.conf ## module: ngx_http_geoip2_module ## https://github.com/leev/ngx_http_geoip2_module ## 讀取 GeoIP 資料庫，並進行變數設定 geoip2 /usr/share/GeoIP/GeoLite2-Country.mmdb { auto_reload 60m; $geoip2_metadata_country_build metadata build_epoch; ## 自定義 $geoip2_data_country_code 值為 $remote_addr 對應的 ISO 3116 規範的國碼 $geoip2_data_country_code source=$remote_addr country iso_code; ## 自定義 $geoip2_data_country_name 值為對應的英文城市名 $geoip2_data_country_name country names en; } upstream.conf ## module: ngx_http_upstream_module ## 定義 server 組別 upstream to_nodejs1 { ## server address [parameters]; 定義 server ## parameters: ## weight=number 定義權重，預設為 1 ## max_fails=number 設定到 upstream server 的最大重試次數，預設為 1 ## fail_timeout=time 設定到達 max_fails 次數之後，暫停向此 upstream server 傳送請求的時間，預設為 10 秒 ## backup 標記此 upstream server 為備用，當其他 upstream server 不可用時，此 upstream server 可接受請求 ## down 標記此 upstream server 為不可用 server 10.</description></item><item><title>Gitlab-CI Introduction</title><link>https://linzeyan.github.io/posts/20210924gitlab/</link><pubDate>Fri, 24 Sep 2021 11:11:03 +0800</pubDate><guid>https://linzeyan.github.io/posts/20210924gitlab/</guid><description>Gitlab CI Concept Gitlab DevOps GitOps Workflow code push -&amp;gt; pipeline -&amp;gt; stage -&amp;gt; job Design plan -&amp;gt; code -&amp;gt; build -&amp;gt; test -&amp;gt; release -&amp;gt; deploy -&amp;gt; operate -&amp;gt; monitor -&amp;gt; plan Runner Executors Shell VirtualBox Docker Docker Machine Kubernetes Else&amp;hellip; References Gitlab CI/CD Gitlab Runner .gitlab-ci.yaml Runner Register gitlab-runner register
After register concurrent = 1 check_interval = 0 [session_server] session_timeout = 1800 [[runners]] name = &amp;#34;public-shell&amp;#34; url = &amp;#34;https://gitlab.</description></item><item><title>Docker Introduction</title><link>https://linzeyan.github.io/posts/20210917docker/</link><pubDate>Fri, 17 Sep 2021 14:11:03 +0800</pubDate><guid>https://linzeyan.github.io/posts/20210917docker/</guid><description>Docker Concept VM vs Container VM - Base on OS Container - Base on Application (Linux Kernel: Namespace and Cgroup) Client to Server Docker daemon - containerd, docker-containerd-shim, docker-runc Docker client - cli command docker cli -&amp;gt; docker daemon -&amp;gt; containerd -&amp;gt; runc -&amp;gt; namespace &amp;amp; cgroup Image Snapshots Container Read-Only processes on image Hub / Registry Store images References Docker —— 從入門到實踐 docker docs Docker commands Dockerfile ARG dist=&amp;#34;/tmp/password&amp;#34; ARG projectDir=&amp;#34;/password&amp;#34; FROM golang:1.</description></item><item><title>Ansible Introduction</title><link>https://linzeyan.github.io/posts/20200926ansible/</link><pubDate>Sat, 26 Sep 2020 16:57:21 +0800</pubDate><guid>https://linzeyan.github.io/posts/20200926ansible/</guid><description>Getting to know Ansible. Outline Introduction Install Common modules Folder structure Conclusion Introduction 安裝部署工具、設定管理工具等
同類型工具：Chef、Puppet、SaltStack
不需要 Agent、透過 ssh
Linux 有 python 即可 ( ssh port )
Win 啟用 winrm 即可 ( 5986 port )
https://docs.ansible.com/ansible/latest/user_guide/windows_winrm.html#inventory-options 資料夾結構簡單易懂、官方文件豐富易懂、模組多支援設備多、易撰寫
Install pip install ansible
pip3 install ansible yum install ansible
apt-get install ansible
apk add ansible
Common modules ping
shell / command
file
yum
systemd / service
template / copy
debug
Common modules - ping Common modules - shell / command Common modules - file Common modules - yum Common modules - systemd / service Common modules - template / copy Common modules - debug / register Folder structure Conclusion 選擇適合的 ansible ad-hoc ansible gitlab -m ping ansible gitlab -m shell -a 'rm -rf /' playbook role collection shell script python script others</description></item></channel></rss>