<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ricky</title><link>https://linzeyan.github.io/</link><description>Recent content on Ricky</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 19 Nov 2021 14:35:58 +0800</lastBuildDate><atom:link href="https://linzeyan.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Nginx notes</title><link>https://linzeyan.github.io/posts/nginx/</link><pubDate>Fri, 19 Nov 2021 14:35:58 +0800</pubDate><guid>https://linzeyan.github.io/posts/nginx/</guid><description>Record Nginx configuration file and explanation. files structure . ├── geoip.conf ├── nginx.conf ├── sites-available │ ├── default.conf ├── sites-enabled │ ├── default.conf -&amp;gt; ../sites-available/default.conf ├── upstream.conf geoip.conf ## module: ngx_http_geoip2_module ## https://github.com/leev/ngx_http_geoip2_module ## 讀取 GeoIP 資料庫，並進行變數設定 geoip2 /usr/share/GeoIP/GeoLite2-Country.mmdb { auto_reload 60m; $geoip2_metadata_country_build metadata build_epoch; ## 自定義 $geoip2_data_country_code 值為 $remote_addr 對應的 ISO 3116 規範的國碼 $geoip2_data_country_code source=$remote_addr country iso_code; ## 自定義 $geoip2_data_country_name 值為對應的英文城市名 $geoip2_data_country_name country names en; } upstream.conf ## module: ngx_http_upstream_module ## 定義 server 組別 upstream to_nodejs1 { ## server address [parameters]; 定義 server ## parameters: ## weight=number 定義權重，預設為 1 ## max_fails=number 設定到 upstream server 的最大重試次數，預設為 1 ## fail_timeout=time 設定到達 max_fails 次數之後，暫停向此 upstream server 傳送請求的時間，預設為 10 秒 ## backup 標記此 upstream server 為備用，當其他 upstream server 不可用時，此 upstream server 可接受請求 ## down 標記此 upstream server 為不可用 server 10.</description></item><item><title>Gitlab-CI Introduction</title><link>https://linzeyan.github.io/posts/gitlab/</link><pubDate>Fri, 24 Sep 2021 11:11:03 +0800</pubDate><guid>https://linzeyan.github.io/posts/gitlab/</guid><description>Gitlab CI Concept Gitlab DevOps GitOps Workflow code push -&amp;gt; pipeline -&amp;gt; stage -&amp;gt; job Design plan -&amp;gt; code -&amp;gt; build -&amp;gt; test -&amp;gt; release -&amp;gt; deploy -&amp;gt; operate -&amp;gt; monitor -&amp;gt; plan Runner Executors Shell VirtualBox Docker Docker Machine Kubernetes Else&amp;hellip; References Gitlab CI/CD Gitlab Runner .gitlab-ci.yaml Runner Register gitlab-runner register
After register concurrent = 1 check_interval = 0 [session_server] session_timeout = 1800 [[runners]] name = &amp;#34;public-shell&amp;#34; url = &amp;#34;https://gitlab.</description></item><item><title>Docker Introduction</title><link>https://linzeyan.github.io/posts/docker/</link><pubDate>Fri, 17 Sep 2021 14:11:03 +0800</pubDate><guid>https://linzeyan.github.io/posts/docker/</guid><description>Docker Concept VM vs Container VM - Base on OS Container - Base on Application (Linux Kernel: Namespace and Cgroup) Client to Server Docker daemon - containerd, docker-containerd-shim, docker-runc Docker client - cli command docker cli -&amp;gt; docker daemon -&amp;gt; containerd -&amp;gt; runc -&amp;gt; namespace &amp;amp; cgroup Image Snapshots Container Read-Only processes on image Hub / Registry Store images References Docker —— 從入門到實踐 docker docs Docker commands Dockerfile ARG dist=&amp;#34;/tmp/password&amp;#34; ARG projectDir=&amp;#34;/password&amp;#34; FROM golang:1.</description></item><item><title>Ansible Introduction</title><link>https://linzeyan.github.io/posts/ansible/</link><pubDate>Sat, 26 Sep 2020 16:57:21 +0800</pubDate><guid>https://linzeyan.github.io/posts/ansible/</guid><description>Getting to know Ansible. Outline Introduction Install Common modules Folder structure Conclusion Introduction 安裝部署工具、設定管理工具等
同類型工具：Chef、Puppet、SaltStack
不需要 Agent、透過 ssh
Linux 有 python 即可 ( ssh port )
Win 啟用 winrm 即可 ( 5986 port )
https://docs.ansible.com/ansible/latest/user_guide/windows_winrm.html#inventory-options 資料夾結構簡單易懂、官方文件豐富易懂、模組多支援設備多、易撰寫
Install pip install ansible
pip3 install ansible yum install ansible
apt-get install ansible
apk add ansible
Common modules ping
shell / command
file
yum
systemd / service
template / copy
debug
Common modules - ping Common modules - shell / command Common modules - file Common modules - yum Common modules - systemd / service Common modules - template / copy Common modules - debug / register Folder structure Conclusion 選擇適合的 ansible ad-hoc ansible gitlab -m ping ansible gitlab -m shell -a 'rm -rf /' playbook role collection shell script python script others</description></item><item><title>Ansible Command</title><link>https://linzeyan.github.io/notes/bash/ansible/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/bash/ansible/</guid><description> Lookup # List all plugins ansible-doc -t lookup -l # Use `ansible-doc -t lookup &amp;lt;plugin&amp;gt;` to see detail ansible-doc -t lookup ping</description></item><item><title>Docker Command</title><link>https://linzeyan.github.io/notes/bash/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/bash/docker/</guid><description> Multiple build-arg docker build . -f ./scripts/Dockerfile \ --build-arg Date=$(date) \ --build-arg Tag=$(git rev-list -n 1 --tags) \ --build-arg Commit=$(git describe --tags --abbrev=0) \ -t ops-cli Run container in different platform finch run -it --rm --platform=linux/arm64 zeyanlin/ops-cli /bin/sh</description></item><item><title>File Related Command</title><link>https://linzeyan.github.io/notes/bash/file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/bash/file/</guid><description>File create time 1. Find Inode $ stat dns.yaml File: dns.yaml Size: 1003 Blocks: 8 IO Block: 4096 regular file Device: ca01h/51713d Inode: 3595636 Links: 1 Access: (0644/-rw-r--r--) Uid: ( 1000/ ubuntu) Gid: ( 1000/ ubuntu) Access: 2022-05-03 12:59:59.996755279 +0800 Modify: 2021-12-10 18:27:54.157585209 +0800 Change: 2022-01-07 14:57:58.619727878 +0800 Birth: - or
$ ls -i dns.yaml 3585173 dns.yaml 2. Find Filesystem $ df dns.yaml Filesystem 1K-blocks Used Available Use% Mounted on /dev/root 101583780 25703988 75863408 26% / 3.</description></item><item><title>Git Command</title><link>https://linzeyan.github.io/notes/bash/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/bash/git/</guid><description> Search in git git rev-list --all | xargs git grep -F &amp;#39;&amp;#39; Count commits git rev-list --count main View a file of another branch git show dev:main.go Take a backup of untracked files git ls-files --others --exclude-standard -z | xargs -0 tar rvf backup-untracked.zip</description></item><item><title>GPG Command</title><link>https://linzeyan.github.io/notes/bash/gpg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/bash/gpg/</guid><description>Install brew install gnupg Generate gpg --full-generate-key gpg --list-secret-keys Add to git gpg --armor --export 51ADF7101CA64B2508AE29EEC279555531A1DD62 Set .gitconfig git config user.email zeyanlin@outlook.com git config user.name Ricky git config user.signingkey 51ADF7101CA64B2508AE29EEC279555531A1DD62 git config commit.gpgsign true Delete key gpg --delete-secret-keys 51ADF7101CA64B2508AE29EEC279555531A1DD62 Backup key # https://www.jwillikers.com/backup-and-restore-a-gpg-key gpg --list-secret-keys --keyid-format LONG # Export key as a file, replace email-address and Enter the private key’s passphrase gpg -o private.gpg --export-options backup --export-secret-keys rickylin@cloud-miner.net # Restore key and enter the private key’s passphrase gpg --import-options restore --import private.</description></item><item><title>markdown notes</title><link>https://linzeyan.github.io/notes/docs/mermaid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/docs/mermaid/</guid><description> link graph LR A B A |text| B C &amp;ndash;&amp;gt; D C &amp;ndash;&amp;gt;|text| D E -.- F E -.-|text| F G -.-&amp;gt; H G -.-&amp;gt;|text| H I === J I ===|text| J K ~~~ L K ~~~|text| L link1 flowchart LR A --o B B --x C D o--o E E &amp;lt;--&amp;gt; F F x--x G shapes graph LR id1[方框] id2(帶有圓角的方框) id3([體育場形狀]) id4[[子例程]] id5[(圓柱狀)] id6((圓形)) id7&amp;gt;非對稱形狀] id8{菱形} id9{{六角形}} id10[/平行四邊形1/] id11[\平行四邊形 2\] id12[/梯形 1\] id13[\梯形 2/] id14(((雙圓))) subgraphs flowchart TD c1--&amp;gt;a2 subgraph one a1--&amp;gt;a2 end subgraph &amp;#34;`**two**`&amp;#34; b1--&amp;gt;b2 end subgraph three c1--&amp;gt;c2 end</description></item><item><title>Network Related Command</title><link>https://linzeyan.github.io/notes/bash/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/bash/network/</guid><description> Check port status # `(echo &amp;gt;/dev/tcp/${host}/${port})` (echo &amp;gt;/dev/tcp/192.168.57.24/80) &amp;amp;&amp;gt;/dev/null &amp;amp;&amp;amp; echo &amp;#34;open&amp;#34; || echo &amp;#34;closed&amp;#34; timeout 1 bash -c &amp;#39;&amp;gt;/dev/tcp/192.168.57.24/80 &amp;amp;&amp;gt;/dev/null&amp;#39; &amp;amp;&amp;amp; echo &amp;#34;open&amp;#34; || echo &amp;#34;closed&amp;#34; timeout 1 bash -c &amp;#39;&amp;gt;/dev/tcp/192.168.57.24/80&amp;#39; &amp;amp;&amp;amp; echo &amp;#34;open&amp;#34; || echo &amp;#34;closed&amp;#34;</description></item><item><title>Pandoc Command</title><link>https://linzeyan.github.io/notes/bash/pandoc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/bash/pandoc/</guid><description> texlive # $ brew install textlive # $ npm i -g mermaid-filter # Render mermaid pandoc -F mermaid-filter -o readme.pdf readme.md</description></item><item><title>SSH Command</title><link>https://linzeyan.github.io/notes/bash/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/bash/ssh/</guid><description> Generate ssh key ssh-keygen -m PEM -t rsa -b 4096 -C &amp;#34;zeyanlin@outlook.com&amp;#34;</description></item><item><title>Array</title><link>https://linzeyan.github.io/notes/go/questions/array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/go/questions/array/</guid><description> array package main import ( &amp;#34;fmt&amp;#34; ) func main() { a := [5]int{1, 2, 3, 4, 5} t := a[3:4:4] fmt.Println(t[0]) } A. 3 B. 4 C. compilation error Answer B</description></item><item><title>Channel</title><link>https://linzeyan.github.io/notes/go/questions/channel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/go/questions/channel/</guid><description>channel package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { ch := make(chan int, 1000) go func() { for i := 0; i &amp;lt; 10; i++ { ch &amp;lt;- i } }() go func() { for { a, ok := &amp;lt;-ch if !ok { fmt.Println(&amp;#34;close&amp;#34;) return } fmt.Println(&amp;#34;a: &amp;#34;, a) } }() close(ch) fmt.Println(&amp;#34;ok&amp;#34;) time.Sleep(time.Second * 100) } Answer ok panic: send on closed channel channel1 package main import ( &amp;#34;fmt&amp;#34; ) func main() { c := make(chan int) close(c) val, _ := &amp;lt;-c fmt.</description></item><item><title>Context</title><link>https://linzeyan.github.io/notes/go/questions/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/go/questions/context/</guid><description> context package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; ) func f(ctx context.Context) { context.WithValue(ctx, &amp;#34;foo&amp;#34;, -6) } func main() { ctx := context.TODO() f(ctx) fmt.Println(ctx.Value(&amp;#34;foo&amp;#34;)) } A. -6 B. 0 C. &amp;lt;nil&amp;gt; D: panic Answer C context1 package main import( &amp;#34;fmt&amp;#34; &amp;#34;encoding/json&amp;#34; &amp;#34;context&amp;#34; ) func main() { data, _ := json.Marshal(context.WithValue(context.Background(), &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;)) fmt.Println(string(data)) } Answer {"Context":0}</description></item><item><title>Defer</title><link>https://linzeyan.github.io/notes/go/questions/defer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/go/questions/defer/</guid><description>defer package main import ( &amp;#34;fmt&amp;#34; ) func main() { defer_call() } func defer_call() { defer func() { fmt.Println(&amp;#34;1&amp;#34;) }() defer func() { fmt.Println(&amp;#34;2&amp;#34;) }() defer func() { fmt.Println(&amp;#34;3&amp;#34;) }() panic(&amp;#34;4&amp;#34;) } Answer 3 2 1 panic: 4 defer1 package main import ( &amp;#34;fmt&amp;#34; ) type Person struct { age int } func main() { person := &amp;amp;Person{28} defer fmt.Println(person.age) defer func(p *Person) { fmt.Println(p.age) }(person) defer func() { fmt.</description></item><item><title>Goroutine</title><link>https://linzeyan.github.io/notes/go/questions/goroutine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/go/questions/goroutine/</guid><description> goroutine package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { ch1 := make(chan int) go fmt.Println(&amp;lt;-ch1) ch1 &amp;lt;- 5 time.Sleep(1 * time.Second) } A. 5 B. deadlock C. compilation error Answer B</description></item><item><title>Interface</title><link>https://linzeyan.github.io/notes/go/questions/interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/go/questions/interface/</guid><description>interface package main import ( &amp;#34;fmt&amp;#34; ) type People interface { Show() } type Student struct{} func (stu *Student) Show() { } func live() People { var stu *Student return stu } func main() { if live() == nil { fmt.Println(&amp;#34;AAAAAAA&amp;#34;) } else { fmt.Println(&amp;#34;BBBBBBB&amp;#34;) } } Answer BBBBBBB interface1 package main import ( &amp;#34;fmt&amp;#34; ) type People interface { Speak(string) string } type Student struct{} func (stu *Student) Speak(think string) (talk string) { if think == &amp;#34;love&amp;#34; { talk = &amp;#34;You are a good boy&amp;#34; } else { talk = &amp;#34;hi&amp;#34; } return } func main() { var peo People = Student{} think := &amp;#34;love&amp;#34; fmt.</description></item><item><title>Iota</title><link>https://linzeyan.github.io/notes/go/questions/iota/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/go/questions/iota/</guid><description> iota package main import &amp;#34;fmt&amp;#34; const ( x = iota _ y z = &amp;#34;zz&amp;#34; k p = iota ) func main() { fmt.Println(x, y, z, k, p) } Answer 0 2 zz zz 5 iota1 package main import &amp;#34;fmt&amp;#34; const ( a = iota b = iota ) const ( name = &amp;#34;name&amp;#34; c = iota d = iota ) func main() { fmt.Println(a, b, c, d) } Answer 0 1 1 2</description></item><item><title>JSON</title><link>https://linzeyan.github.io/notes/go/questions/json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/go/questions/json/</guid><description>json package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) type AutoGenerated struct { Age int `json:&amp;#34;age&amp;#34;` Name string `json:&amp;#34;name&amp;#34;` Child []int `json:&amp;#34;child&amp;#34;` } func main() { jsonStr1 := `{&amp;#34;age&amp;#34;: 14,&amp;#34;name&amp;#34;: &amp;#34;potter&amp;#34;, &amp;#34;child&amp;#34;:[1,2,3]}` a := AutoGenerated{} json.Unmarshal([]byte(jsonStr1), &amp;amp;a) aa := a.Child fmt.Println(aa) jsonStr2 := `{&amp;#34;age&amp;#34;: 12,&amp;#34;name&amp;#34;: &amp;#34;potter&amp;#34;, &amp;#34;child&amp;#34;:[3,4,5,7,8,9]}` json.Unmarshal([]byte(jsonStr2), &amp;amp;a) fmt.Println(aa) } A. [1 2 3] [1 2 3] B. [1 2 3] [3 4 5] C. [1 2 3] [3 4 5 6 7 8 9] D.</description></item><item><title>Len</title><link>https://linzeyan.github.io/notes/go/questions/len/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/go/questions/len/</guid><description>len package main func main() { var x *struct { s [][32]byte } println(len(x.s[99])) } A. panic B. compilation error C. 32 D. 0 Answer C len1 package main const s = &amp;#34;Go101.org&amp;#34; // len(s) == 9 // 1 &amp;lt;&amp;lt; 9 == 512 // 512 / 128 == 4 var a byte = 1 &amp;lt;&amp;lt; len(s) / 128 var b byte = 1 &amp;lt;&amp;lt; len(s[:]) / 128 func main() { println(a, b) } A: 0 0 B: 0 4 C: 4 0 D: 4 4 Answer C len2 package main var s = &amp;#34;Go101.</description></item><item><title>Map</title><link>https://linzeyan.github.io/notes/go/questions/map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/go/questions/map/</guid><description> map package main import &amp;#34;fmt&amp;#34; type Student struct { Name string } var list map[string]Student func main() { list = make(map[string]Student) student := Student{&amp;#34;Aceld&amp;#34;} list[&amp;#34;student&amp;#34;] = student list[&amp;#34;student&amp;#34;].Name = &amp;#34;LDB&amp;#34; fmt.Println(list[&amp;#34;student&amp;#34;]) } Answer compilation error cannot assign to struct field list["student"].Name in map map1 package main func main() { m := make(map[int]int, 3) x := len(m) m[1] = m[1] y := len(m) println(x, y) } Answer 0 1</description></item><item><title>Print</title><link>https://linzeyan.github.io/notes/go/questions/print/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/go/questions/print/</guid><description> print package main import &amp;#34;fmt&amp;#34; type T struct { x int } func (t T) String() string { return &amp;#34;boo&amp;#34; } func main() { t := T{123} fmt.Printf(&amp;#34;%v\n&amp;#34;, t) fmt.Printf(&amp;#34;%#v\n&amp;#34;, t) } Answer boo main.T{x:123} print1 package main import ( &amp;#34;fmt&amp;#34; ) func f(a ...int) { fmt.Printf(&amp;#34;%#v\n&amp;#34;, a) } func main() { f() } Answer []int(nil)</description></item><item><title>Race</title><link>https://linzeyan.github.io/notes/go/questions/race/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/go/questions/race/</guid><description> race type Stats struct { mutex sync.Mutex counters map[string]int } func (s *Stats) Snapshot() map[string]int { s.mutex.Lock() defer s.mutex.Unlock() return s.counters } func (s *Stats) Add(name string, num int) { s.mutex.Lock() defer s.mutex.Unlock() s.counters[name] = num } Answer func (s *Stats) Snapshot() map[string]int { s.mutex.Lock() defer s.mutex.Unlock() result := make(map[string]int, len(s.counters)) for k, v := range s.counters { result[k] = v } return result }</description></item><item><title>Select</title><link>https://linzeyan.github.io/notes/go/questions/select/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/go/questions/select/</guid><description>select package main import &amp;#34;sync&amp;#34; func main() { var wg sync.WaitGroup foo := make(chan int) bar := make(chan int) wg.Add(1) go func() { defer wg.Done() select { case foo &amp;lt;- &amp;lt;-bar: default: println(&amp;#34;default&amp;#34;) } }() wg.Wait() } Answer fatal error: all goroutines are asleep - deadlock! select1 package main import &amp;#34;fmt&amp;#34; func main() { ch1 := make(chan int) ch2 := make(chan int) go func() { ch1 &amp;lt;- 1 }() go func() { select { case &amp;lt;-ch1: case ch2 &amp;lt;- 2: } }() fmt.</description></item><item><title>Slice</title><link>https://linzeyan.github.io/notes/go/questions/slice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/go/questions/slice/</guid><description>slice package main import ( &amp;#34;fmt&amp;#34; ) func main() { var s1 []int var s2 = []int{} if __ == nil { fmt.Println(&amp;#34;nil slice&amp;#34;) } if __ != nil { fmt.Println(&amp;#34;empty slice&amp;#34;) } } A. s1, s2 B. s2, s1 C. s1, s1 D. s2, s2 Answer A slice1 package main import ( &amp;#34;fmt&amp;#34; ) func main() { s := [3]int{1, 2, 3} a := s[:0] b := s[:2] c := s[1:2:cap(s)] fmt.</description></item><item><title>Variable</title><link>https://linzeyan.github.io/notes/go/questions/variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/notes/go/questions/variable/</guid><description>variable A. p.name B. (&amp;amp;p).name C. (*p).name D. p-&amp;gt;name Answer AC variable1 package main import ( &amp;#34;fmt&amp;#34; ) func main() { var ans float64 = 15 + 25 + 5.2 fmt.Println(ans) } A. 45 B. 45.0 C. 45.2 D. compliation error Answer C variable2 package main import ( &amp;#34;fmt&amp;#34; ) func main() { var ans float64 = 3 / 2 fmt.Println(ans) } A. 1.5 B. 1 C. 0 D. compliation error Answer B variable3 package main func main() { const a int8 = -1 var b int8 = -128 / a println(b) } Answer compliation error -128 / a (constant 128 of type int8) overflows int8 variable4 package main func main() { var a int8 = -1 var b int8 = -128 / a println(b) } Answer -128 variable5 package main import &amp;#34;fmt&amp;#34; type MyInt1 int type MyInt2 = int func main() { var i int =0 var i1 MyInt1 = i var i2 MyInt2 = i fmt.</description></item></channel></rss>