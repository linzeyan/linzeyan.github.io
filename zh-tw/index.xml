<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ricky</title><link>https://linzeyan.github.io/zh-tw/</link><description>Recent content on Ricky</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 19 Nov 2021 14:35:58 +0800</lastBuildDate><atom:link href="https://linzeyan.github.io/zh-tw/index.xml" rel="self" type="application/rss+xml"/><item><title>Nginx 筆記</title><link>https://linzeyan.github.io/zh-tw/posts/nginx/</link><pubDate>Fri, 19 Nov 2021 14:35:58 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/nginx/</guid><description>紀錄 Nginx 設定檔及說明 檔案結構 . ├── geoip.conf ├── nginx.conf ├── sites-available │ ├── default.conf ├── sites-enabled │ ├── default.conf -&amp;gt; ../sites-available/default.conf ├── upstream.conf geoip.conf ## module: ngx_http_geoip2_module ## https://github.com/leev/ngx_http_geoip2_module ## 讀取 GeoIP 資料庫，並進行變數設定 geoip2 /usr/share/GeoIP/GeoLite2-Country.mmdb { auto_reload 60m; $geoip2_metadata_country_build metadata build_epoch; ## 自定義 $geoip2_data_country_code 值為 $remote_addr 對應的 ISO 3116 規範的國碼 $geoip2_data_country_code source=$remote_addr country iso_code; ## 自定義 $geoip2_data_country_name 值為對應的英文城市名 $geoip2_data_country_name country names en; } upstream.conf ## module: ngx_http_upstream_module ## 定義 server 組別 upstream to_nodejs1 { ## server address [parameters]; 定義 server ## parameters: ## weight=number 定義權重，預設為 1 ## max_fails=number 設定到 upstream server 的最大重試次數，預設為 1 ## fail_timeout=time 設定到達 max_fails 次數之後，暫停向此 upstream server 傳送請求的時間，預設為 10 秒 ## backup 標記此 upstream server 為備用，當其他 upstream server 不可用時，此 upstream server 可接受請求 ## down 標記此 upstream server 為不可用 server 10.</description></item><item><title>Gitlab-CI Introduction</title><link>https://linzeyan.github.io/zh-tw/posts/gitlab/</link><pubDate>Fri, 24 Sep 2021 11:11:03 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/gitlab/</guid><description>Gitlab CI Concept Gitlab DevOps GitOps Workflow code push -&amp;gt; pipeline -&amp;gt; stage -&amp;gt; job Design plan -&amp;gt; code -&amp;gt; build -&amp;gt; test -&amp;gt; release -&amp;gt; deploy -&amp;gt; operate -&amp;gt; monitor -&amp;gt; plan Runner Executors Shell VirtualBox Docker Docker Machine Kubernetes Else&amp;hellip; References Gitlab CI/CD Gitlab Runner .gitlab-ci.yaml Runner Register gitlab-runner register
After register concurrent = 1 check_interval = 0 [session_server] session_timeout = 1800 [[runners]] name = &amp;#34;public-shell&amp;#34; url = &amp;#34;https://gitlab.</description></item><item><title>Docker Introduction</title><link>https://linzeyan.github.io/zh-tw/posts/docker/</link><pubDate>Fri, 17 Sep 2021 14:11:03 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/docker/</guid><description>Docker Concept VM vs Container VM - Base on OS Container - Base on Application (Linux Kernel: Namespace and Cgroup) Client to Server Docker daemon - containerd, docker-containerd-shim, docker-runc Docker client - cli command docker cli -&amp;gt; docker daemon -&amp;gt; containerd -&amp;gt; runc -&amp;gt; namespace &amp;amp; cgroup Image Snapshots Container Read-Only processes on image Hub / Registry Store images References Docker —— 從入門到實踐 docker docs Docker commands Dockerfile ARG dist=&amp;#34;/tmp/password&amp;#34; ARG projectDir=&amp;#34;/password&amp;#34; FROM golang:1.</description></item><item><title>Ansible 簡介</title><link>https://linzeyan.github.io/zh-tw/posts/ansible/</link><pubDate>Sat, 26 Sep 2020 16:57:21 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/ansible/</guid><description>認識 Ansible 大綱 簡介 安裝 常用模組 資料夾結構 結語 簡介 安裝部署工具、設定管理工具等
同類型工具：Chef、Puppet、SaltStack
不需要 Agent、透過 ssh
Linux 有 python 即可 ( ssh port )
Win 啟用 winrm 即可 ( 5986 port )
https://docs.ansible.com/ansible/latest/user_guide/windows_winrm.html#inventory-options 資料夾結構簡單易懂、官方文件豐富易懂、模組多支援設備多、易撰寫
安裝 pip install ansible
pip3 install ansible yum install ansible
apt-get install ansible
apk add ansible
常用模組 ping
shell / command
file
yum
systemd / service
template / copy
debug
常用模組 - ping 常用模組 - shell / command 常用模組 - file 常用模組 - yum 常用模組 - systemd / service 常用模組 - template / copy 常用模組 - debug / register 資料夾結構 結語 選擇適合的 ansible ad-hoc ansible gitlab -m ping ansible gitlab -m shell -a 'rm -rf /' playbook role collection shell script python script others</description></item><item><title>Ansible Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/ansible/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/ansible/</guid><description> Lookup # List all plugins ansible-doc -t lookup -l # Use `ansible-doc -t lookup &amp;lt;plugin&amp;gt;` to see detail ansible-doc -t lookup ping</description></item><item><title>Docker Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/docker/</guid><description> Multiple build-arg docker build . -f ./scripts/Dockerfile \ --build-arg Date=$(date) \ --build-arg Tag=$(git rev-list -n 1 --tags) \ --build-arg Commit=$(git describe --tags --abbrev=0) \ -t ops-cli Run container in different platform finch run -it --rm --platform=linux/arm64 zeyanlin/ops-cli /bin/sh</description></item><item><title>File Related Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/file/</guid><description>File create time 1. Find Inode $ stat dns.yaml File: dns.yaml Size: 1003 Blocks: 8 IO Block: 4096 regular file Device: ca01h/51713d Inode: 3595636 Links: 1 Access: (0644/-rw-r--r--) Uid: ( 1000/ ubuntu) Gid: ( 1000/ ubuntu) Access: 2022-05-03 12:59:59.996755279 +0800 Modify: 2021-12-10 18:27:54.157585209 +0800 Change: 2022-01-07 14:57:58.619727878 +0800 Birth: - or
$ ls -i dns.yaml 3585173 dns.yaml 2. Find Filesystem $ df dns.yaml Filesystem 1K-blocks Used Available Use% Mounted on /dev/root 101583780 25703988 75863408 26% / 3.</description></item><item><title>Git Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/git/</guid><description> Search in git git rev-list --all | xargs git grep -F &amp;#39;&amp;#39; Count commits git rev-list --count main View a file of another branch git show dev:main.go Take a backup of untracked files git ls-files --others --exclude-standard -z | xargs -0 tar rvf backup-untracked.zip</description></item><item><title>GPG Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/gpg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/gpg/</guid><description>Install brew install gnupg Generate gpg --full-generate-key gpg --list-secret-keys Add to git gpg --armor --export 51ADF7101CA64B2508AE29EEC279555531A1DD62 Set .gitconfig git config user.email zeyanlin@outlook.com git config user.name Ricky git config user.signingkey 51ADF7101CA64B2508AE29EEC279555531A1DD62 git config commit.gpgsign true Delete key gpg --delete-secret-keys 51ADF7101CA64B2508AE29EEC279555531A1DD62 Backup key # https://www.jwillikers.com/backup-and-restore-a-gpg-key gpg --list-secret-keys --keyid-format LONG # Export key as a file, replace email-address and Enter the private key’s passphrase gpg -o private.gpg --export-options backup --export-secret-keys rickylin@cloud-miner.net # Restore key and enter the private key’s passphrase gpg --import-options restore --import private.</description></item><item><title>Network Related Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/network/</guid><description> Check port status # `(echo &amp;gt;/dev/tcp/${host}/${port})` (echo &amp;gt;/dev/tcp/192.168.57.24/80) &amp;amp;&amp;gt;/dev/null &amp;amp;&amp;amp; echo &amp;#34;open&amp;#34; || echo &amp;#34;closed&amp;#34; timeout 1 bash -c &amp;#39;&amp;gt;/dev/tcp/192.168.57.24/80 &amp;amp;&amp;gt;/dev/null&amp;#39; &amp;amp;&amp;amp; echo &amp;#34;open&amp;#34; || echo &amp;#34;closed&amp;#34; timeout 1 bash -c &amp;#39;&amp;gt;/dev/tcp/192.168.57.24/80&amp;#39; &amp;amp;&amp;amp; echo &amp;#34;open&amp;#34; || echo &amp;#34;closed&amp;#34;</description></item><item><title>SSH Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/ssh/</guid><description> Generate ssh key ssh-keygen -m PEM -t rsa -b 4096 -C &amp;#34;zeyanlin@outlook.com&amp;#34;</description></item></channel></rss>