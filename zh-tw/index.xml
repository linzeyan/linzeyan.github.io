<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ricky</title><link>https://linzeyan.github.io/zh-tw/</link><description>Recent content on Ricky</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Tue, 11 Feb 2025 15:06:00 +0800</lastBuildDate><atom:link href="https://linzeyan.github.io/zh-tw/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuring SSH Keys for Multiple GitHub Accounts</title><link>https://linzeyan.github.io/zh-tw/posts/20250211configure-ssh-keys-for-multiple-github-accounts/</link><pubDate>Tue, 11 Feb 2025 15:06:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20250211configure-ssh-keys-for-multiple-github-accounts/</guid><description>Configuring SSH Keys for Multiple GitHub Accounts
Use Different Host values Host github.com HostName github.com User git IdentityFile ~/.ssh/id_fry_ed25519 Host github-plnx HostName github.com User git IdentityFile ~/.ssh/id_fry_plnx_ed25519 # Instead of the actual URL $ git clone git@github.com:planet-express/delivery_service.git # Substitue in our custom Host value for the `github.com` part $ git clone git@github-plnx:planet-express/delivery_service.git Automate Substituting the Host [include] path = ~/.gitconfig_custom # See custom `Host github-plnx` in ~/.ssh/config [url &amp;#34;github-plnx:planet-express&amp;#34;] insteadOf = git@github.</description></item><item><title>iTerm2 features I find useful</title><link>https://linzeyan.github.io/zh-tw/posts/20250209iterm2-features-i-find-useful/</link><pubDate>Sun, 09 Feb 2025 08:52:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20250209iterm2-features-i-find-useful/</guid><description>iTerm2 features I find useful
Show Timestamps ==&amp;gt; ⌘+Shift+E Alert on next prompt ==&amp;gt; ⌘+Option+A Jump between prompts ==&amp;gt; ⌘+Shift+Down Hotkeys to scroll one line at a time ==&amp;gt; ⌘+Up and ⌘+Down Rearrange tabs with hotkeys ==&amp;gt; Ctrl+Shift+B and Ctrl+Shift+F</description></item><item><title>GraphQL Introspection Query</title><link>https://linzeyan.github.io/zh-tw/posts/20250102gql-introspection-query/</link><pubDate>Thu, 02 Jan 2025 15:32:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20250102gql-introspection-query/</guid><description>query IntrospectionQuery { __schema { queryType { name } mutationType { name } subscriptionType { name } types { ...FullType } directives { name description locations args { ...InputValue } } } } fragment FullType on __Type { kind name description fields(includeDeprecated: true) { name description args { ...InputValue } type { ...TypeRef } isDeprecated deprecationReason } inputFields { ...InputValue } interfaces { ...TypeRef } enumValues(includeDeprecated: true) { name description isDeprecated deprecationReason } possibleTypes { .</description></item><item><title>Rules that terminal programs follow</title><link>https://linzeyan.github.io/zh-tw/posts/20241225terminal-rules/</link><pubDate>Wed, 25 Dec 2024 08:45:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20241225terminal-rules/</guid><description>&amp;ldquo;Rules&amp;rdquo; that terminal programs follow
規則 1：非互動程式應在按Ctrl-C時退出 規則 2：按q時，TUI 應退出 規則 3：在空白行上按Ctrl-D時，REPL 應退出 規則 4：不要使用超過 16 種顏色 規則 5：支援 readline 鍵綁定 規則 5.1：Ctrl-W 應刪除最後一個單字 規則 6：寫入管道時禁用顏色 規則 7： - 表示 stdin/stdout</description></item><item><title>Smarter than 'Ctrl+F': Linking Directly to Web Page Content</title><link>https://linzeyan.github.io/zh-tw/posts/20241225linking-directly-to-web-page-content/</link><pubDate>Wed, 25 Dec 2024 08:45:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20241225linking-directly-to-web-page-content/</guid><description>Smarter than &amp;lsquo;Ctrl+F&amp;rsquo;: Linking Directly to Web Page Content
syntax
https://example.com/page.html#:~:text=[prefix-,]textStart[,textEnd][,-suffix]
example
https://developer.mozilla.org/en-US/docs/Web/URI/Fragment/Text_fragments#:~:text=without%20relying%20on%20the%20presence%20of%20IDs</description></item><item><title>Mac 小众软件推荐与工作流分享(2024)</title><link>https://linzeyan.github.io/zh-tw/posts/20241114mac-app-share/</link><pubDate>Thu, 14 Nov 2024 09:52:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20241114mac-app-share/</guid><description>Mac 小众软件推荐与工作流分享(2024)</description></item><item><title>Objective-See: 一个关于 Apple 设备隐私与安全的开源项目组织</title><link>https://linzeyan.github.io/zh-tw/posts/20241113objective-see/</link><pubDate>Wed, 13 Nov 2024 09:44:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20241113objective-see/</guid><description>Objective-See: 一个关于 Apple 设备隐私与安全的开源项目组织 今天搜小工具的时候发现他们做了一堆 macOS 上的开源软件，基本都是和隐私与安全相关的。
KnockKnock: 查看你的 Mac 上有哪些后台进程、守护进程、启动项、内核扩展、登录项、浏览器插件等等。能看到的比那个「Login Items」详细的多（有的软件通过其他方式自启动）
LuLu: 一个开源的 macOS 上的网络防火墙，可以让你详细的控制每个软件的网络连接。（类似 Hands Off!）
TaskExplorer: 一个增强版的任务管理器，可以看到应用的签名、打开的文件、网络连接等等，还可以根据 sha256 自动帮你搜索 VirusTotal 结果。
Do Not Disturb: 可以阻止你的 Mac 被打扰（没错），当你的 Mac 被别人打开盖子时可以发送警告、执行脚本、检测设备变化之类的。
BlockBlock: 可以阻止后台的持久化安装，RansomWhere 可以检测文件被加密的行为，还有一些杂七杂八的独立工具。
https://objective-see.org</description></item><item><title>Advanced Shell Scripting Techniques: Automating Complex Tasks with Bash</title><link>https://linzeyan.github.io/zh-tw/posts/20240925advanced-shell-scripting/</link><pubDate>Wed, 25 Sep 2024 09:23:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20240925advanced-shell-scripting/</guid><description>Advanced Shell Scripting Techniques: Automating Complex Tasks with Bash Advanced Shell Scripting Techniques: Automating Complex Tasks with Bash Use Built-in Commands Built-in commands execute faster because they don&amp;rsquo;t require loading an external process. Minimize Subshells Subshells can be expensive in terms of performance. # Inefficient output=$(cat file.txt) # Efficient output=$(&amp;lt;file.txt) Use Arrays for Bulk Data When handling a large amount of data, arrays can be more efficient and easier to manage than multiple variables.</description></item><item><title>Google Infra</title><link>https://linzeyan.github.io/zh-tw/posts/20240924google-infra/</link><pubDate>Tue, 24 Sep 2024 09:04:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20240924google-infra/</guid><description>Google Infra Google 的十年五代网络架构</description></item><item><title>Supply chain attack</title><link>https://linzeyan.github.io/zh-tw/posts/20240913golang/</link><pubDate>Fri, 13 Sep 2024 09:41:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20240913golang/</guid><description>Go articles 提高警惕，供应链攻击就在你我身边 github.com/siruspen/logrus 假 github.com/sirupsen/logrus 真</description></item><item><title>Lightweight Linux Distributions For Older PCs</title><link>https://linzeyan.github.io/zh-tw/posts/20240820linux/</link><pubDate>Tue, 20 Aug 2024 12:38:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20240820linux/</guid><description>https://www.freecodecamp.org/news/lightweight-linux-distributions-for-your-pc/
Name Site Comment Puppy Linux https://puppylinux-woof-ce.github.io/ This tiny OS weighs in at under 300MB, so it can run smoothly even on systems with as little as 512MB of RAM. Bodhi Linux https://www.bodhilinux.com/ System requirements are just 512MB of RAM and a 500MHz processor. Peppermint OS https://peppermintos.com/ It only needs 512MB of RAM to run, so it will fly on that Pentium 4 machine or Core 2 Duo laptop you have stashed in your closet.</description></item><item><title>Go articles</title><link>https://linzeyan.github.io/zh-tw/posts/20240820golang/</link><pubDate>Tue, 20 Aug 2024 08:55:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20240820golang/</guid><description>Go articles 学会 gin 参数校验之 validator 库，看这一篇就足够了 字符串约束 excludesall：不包含参数中任意的 UNICODE 字符，例如 excludesall=ab
excludesrune：不包含参数表示的 rune 字符，excludesrune=asong
startswith：以参数子串为前缀，例如 startswith=hi
endswith：以参数子串为后缀，例如 endswith=bye。
contains=：包含参数子串，例如 contains=email
containsany：包含参数中任意的 UNICODE 字符，例如 containsany=ab
containsrune：包含参数表示的 rune 字符，例如`containsrune=asong
excludes：不包含参数子串，例如 excludes=email
范围约束 范围约束的字段类型分为三种：
对于数值，我们则可以约束其值 对于切片、数组和 map，我们则可以约束其长度 对于字符串，我们则可以约束其长度
常用 tag 介绍： ne：不等于参数值，例如 ne=5 gt：大于参数值，例如 gt=5 gte：大于等于参数值，例如 gte=50 lt：小于参数值，例如 lt=50 lte：小于等于参数值，例如 lte=50 oneof：只能是列举出的值其中一个，这些值必须是数值或字符串，以空格分隔，如果字符串中有空格，将字符串用单引号包围，例如 oneof=male female。 eq：等于参数值，注意与 len 不同。对于字符串，eq 约束字符串本身的值，而 len 约束字符串长度。例如 eq=10 len：等于参数值，例如 len=10 max：小于等于参数值，例如 max=10 min：大于等于参数值，例如 min=10
Fields 约束 eqfield：定义字段间的相等约束，用于约束同一结构体中的字段。例如：eqfield=Password eqcsfield：约束统一结构体中字段等于另一个字段（相对），确认密码时可以使用，例如：eqfiel=ConfirmPassword nefield：用来约束两个字段是否相同，确认两种颜色是否一致时可以使用，例如：nefield=Color1 necsfield：约束两个字段是否相同（相对）</description></item><item><title>Git force push</title><link>https://linzeyan.github.io/zh-tw/posts/20240726git/</link><pubDate>Fri, 26 Jul 2024 12:24:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20240726git/</guid><description>https://www.jvt.me/posts/2021/10/23/undo-force-push/ https://www.jvt.me/posts/2018/09/18/safely-force-git-push/
git push --force-with-lease</description></item><item><title>Go leetcode</title><link>https://linzeyan.github.io/zh-tw/posts/20240620leetcode/</link><pubDate>Thu, 20 Jun 2024 18:15:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20240620leetcode/</guid><description>https://books.halfrost.com/leetcode/</description></item><item><title>Emoji 正则匹配</title><link>https://linzeyan.github.io/zh-tw/posts/20240519emoji-regexp/</link><pubDate>Sun, 19 May 2024 14:37:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20240519emoji-regexp/</guid><description>Emoji 正则匹配 /\p{Emoji}/u
既然是匹配 Emoji，那么 loneProperty (\p{loneProperty}) 就应该是 Emoji ? 实际测试并不符合需求，因为在 Emoji 官方文档中， 123456789*# 也是被看作是 Emoji， 如果用这个正则的话，就会把数字也认为是 Emoji，不符合只排除特殊表情的要求。
/\p{Extended_Pictographic}/u
而 Extended_Pictographic 表示的 Emoji 才是我们认为的那些表情符号。</description></item><item><title>Prometheus relabeling and linux metrics</title><link>https://linzeyan.github.io/zh-tw/posts/20240514prometheus/</link><pubDate>Tue, 14 May 2024 13:49:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20240514prometheus/</guid><description>Prometheus relabeling and linux metrics Adding new label
- target_label: &amp;#34;foo&amp;#34; replacement: &amp;#34;bar&amp;#34; metrics
rkB/s: rate(node_disk_read_bytes_total[*]) Unit: bytes per second wkB/s: rate(node_disk_written_bytes_total[*]) Unit: bytes per second Reference How to use relabeling in Prometheus and VictoriaMetrics Interpreting Prometheus metrics for Linux disk I/O utilization</description></item><item><title>LLMs Hackmd Docs</title><link>https://linzeyan.github.io/zh-tw/posts/20240510llm/</link><pubDate>Fri, 10 May 2024 10:08:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20240510llm/</guid><description>LLMs Hackmd Docs LM STUDIO chromadb/chroma ollama/ollama mintplexlabs/anythingllm References 大型語言模型 LLMs 課程教學 課程大綱 (四) 大型語言模型 LLMs 課程教學 課程大綱 (五) 大型語言模型 LLMs 課程教學 課程大綱 (六)</description></item><item><title>Taide - training data</title><link>https://linzeyan.github.io/zh-tw/posts/20240427taide/</link><pubDate>Sat, 27 Apr 2024 17:10:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20240427taide/</guid><description>Taide - training data</description></item><item><title>Run llama3</title><link>https://linzeyan.github.io/zh-tw/posts/20240425ollama/</link><pubDate>Thu, 25 Apr 2024 10:14:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20240425ollama/</guid><description>ollama Instructions Docker-compose version: &amp;#34;3.8&amp;#34; services: ollama: image: ollama/ollama:latest container_name: ollama restart: unless-stopped volumes: - ./ollama/ollama:/root/.ollama tty: true ports: - 11434:11434 networks: - ollama-docker # deploy: # resources: # reservations: # devices: # - driver: nvidia # count: 1 # capabilities: [gpu] ollama-webui: image: ghcr.io/ollama-webui/ollama-webui:main container_name: ollama-webui restart: unless-stopped volumes: - ./ollama/ollama-webui:/app/backend/data ports: - 8080:8080 environment: - &amp;#34;/ollama/api=http://ollama:11434/api&amp;#34; extra_hosts: - host.docker.internal:host-gateway networks: - ollama-docker networks: ollama-docker: Setup # Run docker-compose docker-compose up -d # Pull model(https://ollama.</description></item><item><title>一文读不懂的 Go 1.21 GA 的 PGO 优化——一次在 WebP Server Go 上的尝试</title><link>https://linzeyan.github.io/zh-tw/posts/20240425pgo/</link><pubDate>Thu, 25 Apr 2024 09:22:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20240425pgo/</guid><description>一文读不懂的 Go 1.21 GA 的 PGO 优化——一次在 WebP Server Go 上的尝试</description></item><item><title>Go Style Decisions - Pass values</title><link>https://linzeyan.github.io/zh-tw/posts/20240413decisions-pass-values/</link><pubDate>Sat, 13 Apr 2024 17:38:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20240413decisions-pass-values/</guid><description>Go Style Decisions - Pass values 不要僅僅為了節省一些位元組而將指標作為函數參數傳遞。如果函數始終將其參數 x 讀取為 *x，則該參數不應該是指標。常見的實例包括傳遞指向字串的指標 (*string) 或指向介面值的指標 (*io.Reader)。在這兩種情況下，值本身都是固定大小的，可以直接傳遞。
此建議不適用於大型結構，甚至不適用於可能增加大小的小型結構。特別是，協定緩衝區訊息通常應透過指標而不是值來處理。指標類型滿足 proto.Message 介面（被 proto.Marshal 、 protocmp.Transform 等接受），且協定緩衝區訊息可能非常大，並且通常會隨著時間的推移而變得更大。</description></item><item><title>LLM Visualization</title><link>https://linzeyan.github.io/zh-tw/posts/20240121llm/</link><pubDate>Sun, 21 Jan 2024 12:40:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20240121llm/</guid><description>LLM Visualization Github</description></item><item><title>A python script that allows your terminal to snow.</title><link>https://linzeyan.github.io/zh-tw/posts/20231224snow/</link><pubDate>Sun, 24 Dec 2023 15:40:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20231224snow/</guid><description>A python script that allows your terminal to snow. docker run --rm -ti sontek/snowmachine tree --color rainbow --particle &amp;#34;*&amp;#34; --snow true --lights-color rainbow</description></item><item><title>Add SFTP user and share directory</title><link>https://linzeyan.github.io/zh-tw/posts/20231130sftp/</link><pubDate>Thu, 30 Nov 2023 17:22:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20231130sftp/</guid><description>Add SFTP user and share directory dev_test_user, qa_test_user 同權限 dev_user, qa_user 同權限
1. 建立共享資料夾(SFTP 使用的資料夾) sudo mkdir -p /home/{test,prod}/{exchange,upload} sudo mkdir -p /home/{test,prod}/exchange/success sudo mkdir -p /home/{test,prod}/upload/backup 2. 建立使用者群組 sudo groupadd share01-test sudo groupadd share01-prod 3. 創建 qa_test_user 使用者並設定 qa_test_user 使用者的群組為 share01-test sudo useradd -m -G share01-test qa_test_user # 設定 dev_test_user 使用者的群組為 share01-test sudo usermod -G share01-test dev_test_user # 設定密碼 sudo passwd qa_test_user 4. 創建 qa_user 使用者並設定 qa_user 使用者的群組為 share01-prod sudo useradd -m -G share01-prod qa_user # 設定 dev_user 使用者的群組為 share01-prod sudo usermod -G share01-prod dev_user # 設定密碼 sudo passwd qa_user 5.</description></item><item><title>Use terminal and SSH to remote host</title><link>https://linzeyan.github.io/zh-tw/posts/20231124ssh/</link><pubDate>Fri, 24 Nov 2023 22:22:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20231124ssh/</guid><description>Use terminal and SSH to remote host 1. Modern Terminals Hyper iTerm2 Tabby Warp Wez&amp;rsquo;s Terminal WindTerm 2. Open terminal in macOS ⌘ + space open Spotlight search terminal.app press ↩ 3. SSH to remote host ensure the private key file path. enter the command in the terminal: ssh -i /path/to/private_key.pem ubuntu@ubuntu.host.com</description></item><item><title>Fetch GraphQL schema information</title><link>https://linzeyan.github.io/zh-tw/posts/20231018graphql/</link><pubDate>Wed, 18 Oct 2023 20:56:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20231018graphql/</guid><description>curl \ -XPOST \ -H &amp;#34;Content-Type: application/json&amp;#34; \ -d &amp;#39;{&amp;#34;query&amp;#34;:&amp;#34;{__schema { types { name enumValues { name } fields { name type {name kind enumValues { name } ofType { name kind ofType {name kind}}}}}}}&amp;#34;}&amp;#39; \ https://example.com/graphql</description></item><item><title>Container security fundamentals</title><link>https://linzeyan.github.io/zh-tw/posts/20231004container/</link><pubDate>Wed, 04 Oct 2023 09:06:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20231004container/</guid><description>Container security fundamentals</description></item><item><title>調整系統使得 EMQX 可以支援 1M 連線</title><link>https://linzeyan.github.io/zh-tw/posts/20230927mqtt/</link><pubDate>Wed, 27 Sep 2023 10:36:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20230927mqtt/</guid><description>Reference Tuning EMQX to Scale to One Million Concurrent Connection on Kubernetes Performance Tuning (Linux) 矽谷牛的耕田筆記 Note Linux Kernel Tuning node level, basically the non-namespaced sysctls # Sets the maximum number of file handles allowed by the kernel sysctl -w fs.file-max=2097152 # Sets the maximum number of open file descriptors that a process can have sysctl -w fs.nr_open=2097152 namespaced sysctls # Sets the maximum number of connections that can be queued for acceptance by the kernel.</description></item><item><title>Install Chrome OS</title><link>https://linzeyan.github.io/zh-tw/posts/20230927chromeos/</link><pubDate>Wed, 27 Sep 2023 09:36:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20230927chromeos/</guid><description>老電腦別丟掉！安裝 Google 免費作業系統安裝教學（Chrome OS Flex /CloudReady）</description></item><item><title>永齡基金會AI大師論壇:人工智慧如何形塑人類未來</title><link>https://linzeyan.github.io/zh-tw/posts/20230927ai/</link><pubDate>Wed, 27 Sep 2023 09:36:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20230927ai/</guid><description>https://www.youtube.com/watch?v=M3z6gI1AEns</description></item><item><title>Golang tips</title><link>https://linzeyan.github.io/zh-tw/posts/20230926golang/</link><pubDate>Tue, 26 Sep 2023 22:15:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20230926golang/</guid><description>Go 语言是一个高性能的语言，但并不是说这样我们就不用关心性能了，我们还是需要关心的。下面是一个在编程方面和性能相关的提示。
如果需要把数字转字符串，使用 strconv.Itoa() 会比 fmt.Sprintf() 要快一倍左右 尽可能地避免把 String 转成[]Byte 。这个转换会导致性能下降。 如果在 for-loop 里对某个 slice 使用 append()请先把 slice 的容量很扩充到位，这样可以避免内存重新分享以及系统自动按 2 的 N 次方幂进行扩展但又用不到，从而浪费内存。 使用 StringBuffer 或是 StringBuild 来拼接字符串，会比使用 + 或 += 性能高三到四个数量级。 尽可能的使用并发的 go routine，然后使用 sync.WaitGroup 来同步分片操作 避免在热代码中进行内存分配，这样会导致 gc 很忙。尽可能的使用 sync.Pool 来重用对象。 使用 lock-free 的操作，避免使用 mutex，尽可能使用 sync/Atomic 包。 （关于无锁编程的相关话题，可参看《无锁队列实现》或《无锁 Hashmap 实现》） 使用 I/O 缓冲，I/O 是个非常非常慢的操作，使用 bufio.NewWrite() 和 bufio.NewReader() 可以带来更高的性能。 对于在 for-loop 里的固定的正则表达式，一定要使用 regexp.Compile() 编译正则表达式。性能会得升两个数量级。 如果你需要更高性能的协议，你要考虑使用 protobuf 或 msgp 而不是 JSON，因为 JSON 的序列化和反序列化里使用了反射。 你在使用 map 的时候，使用整型的 key 会比字符串的要快，因为整型比较比字符串比较要快。 Reference GO 编程模式：切片，接口，时间和性能</description></item><item><title>datavizproject</title><link>https://linzeyan.github.io/zh-tw/posts/20230926datavizproject/</link><pubDate>Tue, 26 Sep 2023 13:29:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20230926datavizproject/</guid><description>https://datavizproject.com</description></item><item><title>朋友旅行防止絕交檢查表</title><link>https://linzeyan.github.io/zh-tw/posts/20230926checklist/</link><pubDate>Tue, 26 Sep 2023 13:29:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20230926checklist/</guid><description>https://travel-questions.gnehs.net/</description></item><item><title>Cloudflare Zero Trust</title><link>https://linzeyan.github.io/zh-tw/posts/20230926cloudflare/</link><pubDate>Tue, 26 Sep 2023 09:01:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20230926cloudflare/</guid><description>Connect private networks 1. Set up the client Create device enrollment rules Create device enrollment rules to determine which devices can enroll to Zero Trust organization.
Set device enrollment permissions In Zero Trust, go to Settings &amp;gt; WARP Client &amp;gt; Device enrollment &amp;gt; Device enrollment permissions &amp;gt; Manage. Rules &amp;gt; Policies &amp;gt; Add a rule &amp;gt; Include &amp;gt; Selector &amp;gt; Emails ending in &amp;gt; Value &amp;gt; @ruru910.com. 2. Route private network IPs through WARP In Zero Trust, go to Settings &amp;gt; WARP Client &amp;gt; Device settings &amp;gt; Profile settings &amp;gt; Profile name &amp;gt; Default &amp;gt; Configure.</description></item><item><title>Cloudflare tunnel on Synology</title><link>https://linzeyan.github.io/zh-tw/posts/20230925cloudflare/</link><pubDate>Mon, 25 Sep 2023 22:01:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20230925cloudflare/</guid><description>Setup Synology Create a directory in docker directory, such as cloudflare-tunnel. Download cloudflared/cloudflared image to registry. ssh to admin@synology Change cloudflare-tunnel owner, sudo chown -R 65532:65532 /volume1/docker/cloudflare-tunnel. Run containers - cloudflared tunnel login Run container and mount volume docker/cloudflare-tunnel:/home/nonroot/.cloudflared. Select Use the same network as Docker Host in network tab. Add command tunnel login in envorinment tab. Go to container log, and copy login url. Paste url to browser and authorize the zone.</description></item><item><title>Nginx 筆記</title><link>https://linzeyan.github.io/zh-tw/posts/20211119nginx/</link><pubDate>Fri, 19 Nov 2021 14:35:58 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20211119nginx/</guid><description>紀錄 Nginx 設定檔及說明 檔案結構 . ├── geoip.conf ├── nginx.conf ├── sites-available │ ├── default.conf ├── sites-enabled │ ├── default.conf -&amp;gt; ../sites-available/default.conf ├── upstream.conf geoip.conf ## module: ngx_http_geoip2_module ## https://github.com/leev/ngx_http_geoip2_module ## 讀取 GeoIP 資料庫，並進行變數設定 geoip2 /usr/share/GeoIP/GeoLite2-Country.mmdb { auto_reload 60m; $geoip2_metadata_country_build metadata build_epoch; ## 自定義 $geoip2_data_country_code 值為 $remote_addr 對應的 ISO 3116 規範的國碼 $geoip2_data_country_code source=$remote_addr country iso_code; ## 自定義 $geoip2_data_country_name 值為對應的英文城市名 $geoip2_data_country_name country names en; } upstream.conf ## module: ngx_http_upstream_module ## 定義 server 組別 upstream to_nodejs1 { ## server address [parameters]; 定義 server ## parameters: ## weight=number 定義權重，預設為 1 ## max_fails=number 設定到 upstream server 的最大重試次數，預設為 1 ## fail_timeout=time 設定到達 max_fails 次數之後，暫停向此 upstream server 傳送請求的時間，預設為 10 秒 ## backup 標記此 upstream server 為備用，當其他 upstream server 不可用時，此 upstream server 可接受請求 ## down 標記此 upstream server 為不可用 server 10.</description></item><item><title>Gitlab-CI Introduction</title><link>https://linzeyan.github.io/zh-tw/posts/20210924gitlab/</link><pubDate>Fri, 24 Sep 2021 11:11:03 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20210924gitlab/</guid><description>Gitlab CI Concept Gitlab DevOps GitOps Workflow code push -&amp;gt; pipeline -&amp;gt; stage -&amp;gt; job Design plan -&amp;gt; code -&amp;gt; build -&amp;gt; test -&amp;gt; release -&amp;gt; deploy -&amp;gt; operate -&amp;gt; monitor -&amp;gt; plan Runner Executors Shell VirtualBox Docker Docker Machine Kubernetes Else&amp;hellip; References Gitlab CI/CD Gitlab Runner .gitlab-ci.yaml Runner Register gitlab-runner register
After register concurrent = 1 check_interval = 0 [session_server] session_timeout = 1800 [[runners]] name = &amp;#34;public-shell&amp;#34; url = &amp;#34;https://gitlab.</description></item><item><title>Docker Introduction</title><link>https://linzeyan.github.io/zh-tw/posts/20210917docker/</link><pubDate>Fri, 17 Sep 2021 14:11:03 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20210917docker/</guid><description>Docker Concept VM vs Container VM - Base on OS Container - Base on Application (Linux Kernel: Namespace and Cgroup) Client to Server Docker daemon - containerd, docker-containerd-shim, docker-runc Docker client - cli command docker cli -&amp;gt; docker daemon -&amp;gt; containerd -&amp;gt; runc -&amp;gt; namespace &amp;amp; cgroup Image Snapshots Container Read-Only processes on image Hub / Registry Store images References Docker —— 從入門到實踐 docker docs Docker commands Dockerfile ARG dist=&amp;#34;/tmp/password&amp;#34; ARG projectDir=&amp;#34;/password&amp;#34; FROM golang:1.</description></item><item><title>Ansible 簡介</title><link>https://linzeyan.github.io/zh-tw/posts/20200926ansible/</link><pubDate>Sat, 26 Sep 2020 16:57:21 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20200926ansible/</guid><description>認識 Ansible 大綱 簡介 安裝 常用模組 資料夾結構 結語 簡介 安裝部署工具、設定管理工具等
同類型工具：Chef、Puppet、SaltStack
不需要 Agent、透過 ssh
Linux 有 python 即可 ( ssh port )
Win 啟用 winrm 即可 ( 5986 port )
https://docs.ansible.com/ansible/latest/user_guide/windows_winrm.html#inventory-options 資料夾結構簡單易懂、官方文件豐富易懂、模組多支援設備多、易撰寫
安裝 pip install ansible
pip3 install ansible yum install ansible
apt-get install ansible
apk add ansible
常用模組 ping
shell / command
file
yum
systemd / service
template / copy
debug
常用模組 - ping 常用模組 - shell / command 常用模組 - file 常用模組 - yum 常用模組 - systemd / service 常用模組 - template / copy 常用模組 - debug / register 資料夾結構 結語 選擇適合的 ansible ad-hoc ansible gitlab -m ping ansible gitlab -m shell -a 'rm -rf /' playbook role collection shell script python script others</description></item><item><title>Ansible Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/ansible/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/ansible/</guid><description> Lookup # List all plugins ansible-doc -t lookup -l # Use `ansible-doc -t lookup &amp;lt;plugin&amp;gt;` to see detail ansible-doc -t lookup ping winrm - console output 在 hyper-v 那台機器 Enable Winrm 之後 一直出現下面的錯誤。 在 group 加上一行即可
ansible_winrm_transport=ntlm
hyper-v01 | UNREACHABLE! =&amp;gt; { &amp;#34;changed&amp;#34;: false, &amp;#34;msg&amp;#34;: &amp;#34;ssl: the specified credentials were rejected by the server&amp;#34;, &amp;#34;unreachable&amp;#34;: true } - /etc/ansible/hosts ansible_user=administrator ansible_password=password ansible_port=5986 ansible_connection=winrm ansible_winrm_server_cert_validation=ignore ansible_winrm_transport=ntlm</description></item><item><title>AWS Command</title><link>https://linzeyan.github.io/zh-tw/notes/aws/command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/aws/command/</guid><description>CloudFront # list distributions aws cloudfront list-distributions --query &amp;#39;*.Items[*].[Comment,Id,Aliases.Items[0],DefaultCacheBehavior.TargetOriginId]&amp;#39; --output table # create invalidation aws cloudfront create-invalidation --distribution-id EATDVGD171BHDS1 --paths &amp;#34;/*&amp;#34; ## check cloudfornt log enable or not for i in $(aws cloudfront list-distributions --output table --query &amp;#39;DistributionList.Items[*].Id&amp;#39; --profile route53 | sed &amp;#39;1,3d;$d&amp;#39; | awk &amp;#39;{print $2}&amp;#39;) do result=$(aws cloudfront get-distribution --id ${i} --query &amp;#39;Distribution.DistributionConfig.Logging&amp;#39; --profile route53 | jq .Enabled) if [[ &amp;#34;${result}&amp;#34; != &amp;#34;true&amp;#34; ]];then echo ${i} fi done EC2 # list aws ec2 describe-instances --query &amp;#39;Reservations[*].</description></item><item><title>AWS Configure</title><link>https://linzeyan.github.io/zh-tw/notes/aws/configure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/aws/configure/</guid><description> S3 Bucket Policy { &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;, &amp;#34;Statement&amp;#34;: [ { &amp;#34;Sid&amp;#34;: &amp;#34;AllowPublicRead&amp;#34;, &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;, &amp;#34;Principal&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;Action&amp;#34;: &amp;#34;s3:GetObject&amp;#34;, &amp;#34;Resource&amp;#34;: &amp;#34;arn:aws:s3:::bucketName/*&amp;#34; } ] } S3 CORS [ { &amp;#34;AllowedHeaders&amp;#34;: [&amp;#34;*&amp;#34;], &amp;#34;AllowedMethods&amp;#34;: [&amp;#34;GET&amp;#34;, &amp;#34;PUT&amp;#34;, &amp;#34;POST&amp;#34;, &amp;#34;DELETE&amp;#34;], &amp;#34;AllowedOrigins&amp;#34;: [&amp;#34;*&amp;#34;], &amp;#34;ExposeHeaders&amp;#34;: [ &amp;#34;x-amz-server-side-encryption&amp;#34;, &amp;#34;x-amz-request-id&amp;#34;, &amp;#34;x-amz-id-2&amp;#34; ], &amp;#34;MaxAgeSeconds&amp;#34;: 3000 } ] ECR Lifecycle Policy { &amp;#34;rules&amp;#34;: [ { &amp;#34;rulePriority&amp;#34;: 1, &amp;#34;description&amp;#34;: &amp;#34;Keep only the last 100 images&amp;#34;, &amp;#34;selection&amp;#34;: { &amp;#34;tagStatus&amp;#34;: &amp;#34;any&amp;#34;, &amp;#34;countType&amp;#34;: &amp;#34;imageCountMoreThan&amp;#34;, &amp;#34;countNumber&amp;#34;: 100 }, &amp;#34;action&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;expire&amp;#34; } } ] } ECR Lifecycle Policy1 { &amp;#34;rules&amp;#34;: [ { &amp;#34;rulePriority&amp;#34;: 1, &amp;#34;description&amp;#34;: &amp;#34;Remove images with certain tag&amp;#34;, &amp;#34;selection&amp;#34;: { &amp;#34;tagStatus&amp;#34;: &amp;#34;tagged&amp;#34;, &amp;#34;tagPrefixList&amp;#34;: [&amp;#34;tag1&amp;#34;, &amp;#34;tag2&amp;#34;], &amp;#34;countType&amp;#34;: &amp;#34;imageCountMoreThan&amp;#34;, &amp;#34;countNumber&amp;#34;: 0 }, &amp;#34;action&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;expire&amp;#34; } } ] } ECR Lifecycle Policy2 { &amp;#34;rules&amp;#34;: [ { &amp;#34;rulePriority&amp;#34;: 1, &amp;#34;description&amp;#34;: &amp;#34;Remove untagged images older than 14 days&amp;#34;, &amp;#34;selection&amp;#34;: { &amp;#34;tagStatus&amp;#34;: &amp;#34;untagged&amp;#34;, &amp;#34;countType&amp;#34;: &amp;#34;sinceImagePushed&amp;#34;, &amp;#34;countUnit&amp;#34;: &amp;#34;days&amp;#34;, &amp;#34;countNumber&amp;#34;: 14 }, &amp;#34;action&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;expire&amp;#34; } } ] }</description></item><item><title>AWS Terraform</title><link>https://linzeyan.github.io/zh-tw/notes/aws/terraform/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/aws/terraform/</guid><description> tf Provider provider.tf EC2 ec2.tf initial.bash Elastic IP elasticip.tf MQ mq.tf RDS rds.tf Security Group sg.tf VPC vpc.tf WAF waf.tf</description></item><item><title>Cloudflare docs</title><link>https://linzeyan.github.io/zh-tw/notes/docs/cloudflare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/cloudflare/</guid><description>Setting CloudFlare Worker for CORS addEventListener(&amp;#34;fetch&amp;#34;, (event) =&amp;gt; { event.respondWith(handleRequest(event.request)); }); async function handleRequest(request) { let response = await fetch(request); response = new Response(response.body, response); response.headers.set( &amp;#34;Access-Control-Allow-Origin&amp;#34;, &amp;#34;frontend-h5.shyc883.com&amp;#34; ); response.headers.set(&amp;#34;Access-Control-Allow-Methods&amp;#34;, &amp;#34;GET, OPTIONS, POST&amp;#34;); response.headers.set( &amp;#34;Access-Control-Allow-Headers&amp;#34;, &amp;#34;Content-Type, Authorization&amp;#34; ); response.headers.set(&amp;#34;Access-Control-Allow-Credentials&amp;#34;, true); return response; } Terraform_create_record terraform { required_providers { cloudflare = { source = &amp;#34;cloudflare/cloudflare&amp;#34; version = &amp;#34;~&amp;gt; 2.0&amp;#34; } } } provider &amp;#34;cloudflare&amp;#34; { email = &amp;#34;cloudflare@gmail.com&amp;#34; api_key = &amp;#34;1488ed0d2082ed36c010b773431fd9dcacde1&amp;#34; account_id = &amp;#34;06ae012a1ba907df24a220cd14a4fa8b&amp;#34; } resource &amp;#34;cloudflare_record&amp;#34; &amp;#34;gitlab&amp;#34; { zone_id = &amp;#34;92c6d5010fbacab27d464f4d79c11fce&amp;#34; name = &amp;#34;gitlab&amp;#34; value = &amp;#34;192.</description></item><item><title>Common Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/common/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/common/</guid><description>ab ab -n 20 -c 20 -k https://default.hddv1.com/error age # generate public and private keys age-keygen -o key.txt # encrypt file with public key age -r public_key -o file.txt.enc file.txt # encrypt file with ssh key age -R ~/.ssh/id_ed25519.pub file.txt &amp;gt; file.txt.enc # decrypt file age --decrypt -i key.txt file.txt.enc &amp;gt; file.txt awk # To lowercase uuidgen|awk &amp;#39;{print tolower($0)}&amp;#39; # output: 649612b0-0fa4-4b50-9b13-17279f602a43 # To uppercase echo &amp;#39;hello world&amp;#39;|awk &amp;#39;{print toupper($0)}&amp;#39; # output: HELLO WORLD # 提取子字符串: `substr(string, start, length)` echo &amp;#34;hello world&amp;#34; | awk &amp;#39;{print substr($0, 1, 5)}&amp;#39; # output: hello # 全局替換字符串中的正則表達式匹配項: `gsub(regex, replacement, string)` # 替換字符串中首次匹配的正則表達式: `sub(regex, replacement, string)` echo &amp;#34;hello world&amp;#34; | awk &amp;#39;{gsub(/world/, &amp;#34;everyone&amp;#34;); print $0}&amp;#39; # output: hello everyone # 將數字轉換為整數 echo &amp;#34;3.</description></item><item><title>Diagrams</title><link>https://linzeyan.github.io/zh-tw/notes/docs/diagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/diagrams/</guid><description> Diagrams https://diagrams.mingrammer.com/docs/getting-started/installation</description></item><item><title>Docker Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/docker/</guid><description>Build with secret Dockerfile # syntax = docker/dockerfile:1.6 FROM golang:1.21.1-alpine3.18 RUN --mount=type=secret,id=mysecret,target=/root/.ssh/id_rsa git clone git@gitlab.com:ricky/repo.git Command export DOCKER_BUILDKIT=1 docker build --secret id=mysecret,src=id_rsa -t image . Compose # Force pull image docker-compose up -d --pull always Create buildx instance # create buildx instance docker buildx create --name builder --bootstrap --driver docker-container # install emulators docker run --privileged --rm tonistiigi/binfmt --install all Create Network docker network create -d bridge --subnet 172.100.0.0/24 --gateway 172.</description></item><item><title>Docker docs</title><link>https://linzeyan.github.io/zh-tw/notes/docs/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/docker/</guid><description>docker-compose cAdvisor docker-compose.yaml prometheus.yaml Elasticsearch docker-compose.yaml local dev docker-compose.yaml NodeJS docker-compose.yaml rstudio docker-compose.yaml rsyncd docker-compose.yaml rsyncd.conf rsyncd.secrets rsync -auz --password-file=/tmp/pass dist user@hostip::myshare Dockerfile awscli Dockerfile buildx Dockerfile docker buildx build --push --platform linux/arm64,linux/amd64 -t zeyanlin/app . dind Dockerfile golang Dockerfile docker build --secret id=mysecret,src=id_rsa -t app . goproxy Dockerfile docker buildx build -f goproxy/Dockerfile --platform linux/amd64,linux/arm64 -t zeyanlin/goproxy:latest --push . Gitlab-ci Dockerfile telegram.bash nginx Dockerfile docker-compose.yml nginx.conf rstudio Dockerfile pkg.</description></item><item><title>File Related Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/file/</guid><description>File create time 1. Find Inode $ stat dns.yaml File: dns.yaml Size: 1003 Blocks: 8 IO Block: 4096 regular file Device: ca01h/51713d Inode: 3595636 Links: 1 Access: (0644/-rw-r--r--) Uid: ( 1000/ ubuntu) Gid: ( 1000/ ubuntu) Access: 2022-05-03 12:59:59.996755279 +0800 Modify: 2021-12-10 18:27:54.157585209 +0800 Change: 2022-01-07 14:57:58.619727878 +0800 Birth: - or
$ ls -i dns.yaml 3585173 dns.yaml 2. Find Filesystem $ df dns.yaml Filesystem 1K-blocks Used Available Use% Mounted on /dev/root 101583780 25703988 75863408 26% / 3.</description></item><item><title>GCP Command</title><link>https://linzeyan.github.io/zh-tw/notes/gcp/command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/gcp/command/</guid><description>monitoring # list gcloud alpha monitoring policies list --project=&amp;#34;project-prod-a&amp;#34; &amp;gt;project-prod-a.yaml # update gcloud alpha monitoring policies update --policy-from-file=&amp;#34;project-prod-a.yaml&amp;#34; &amp;#34;project-prod-a&amp;#34; cloud storage # Create bucket gsutil mb -c standard -l asia-east2 gs://prod-a gsutil iam ch allUsers:objectViewer gs://prod-a # Upload files gsutil -m rsync -x &amp;#34;.svn/&amp;#34; -u -d -r srcDir gs://prod-a gsutil -m cp downloads/*.csv gs://prod-a/data/ # Create CORS file cat &amp;lt;&amp;lt; EOF &amp;gt; /data/cors.json [ { &amp;#34;origin&amp;#34;: [&amp;#34;*&amp;#34;], &amp;#34;responseHeader&amp;#34;: [&amp;#34;Access-Control-Allow-Origin&amp;#34;], &amp;#34;method&amp;#34;: [&amp;#34;GET&amp;#34;,&amp;#34;HEAD&amp;#34;,&amp;#34;DELETE&amp;#34;], &amp;#34;maxAgeSeconds&amp;#34;: 3600 } ] EOF # Set CORS gsutil cors set /data/cors.</description></item><item><title>Git Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/git/</guid><description>Search in git git rev-list --all | xargs git grep -F &amp;#39;&amp;#39; Count commits git rev-list --count main View a file of another branch git show dev:main.go Take a backup of untracked files git ls-files --others --exclude-standard -z | xargs -0 tar rvf backup-untracked.zip Submodule # Add submodule git submodule add -b main git@github.com:linzeyan/toha.git themes/toha # Update submodule git submodule update --init --remote # Remove submodule modulePath=&amp;#34;themes/toha&amp;#34; git submodule deinit -f ${modulePath} git rm ${modulePath} rm -rf .</description></item><item><title>Gitlab Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/gitlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/gitlab/</guid><description>cleanup doc
# artifacts gitlab-rake gitlab:cleanup:orphan_job_artifact_files # expire session gitlab-rake gitlab:cleanup:sessions:active_sessions_lookup_keys # lfs gitlab-rake gitlab:cleanup:orphan_lfs_files # project gitlab-rake gitlab:cleanup:project_uploads gitlab-rake gitlab:cleanup:remote_upload_files # registry gitlab-ctl registry-garbage-collect gitlab-ctl registry-garbage-collect -m migration 1. Copy Old Crontab、Old /etc/gitlab、update-ca-trust 2. Version should be same 3. Copy newest backup file 4. Stop Services gitlab-ctl stop unicorn gitlab-ctl stop puma gitlab-ctl stop sidekiq gitlab-ctl status 5. Restore File must put in /var/opt/gitlab/backup
chown git:git backupfile gitlab-backup restore BACKUP=11493107454_2018_04_25_10.</description></item><item><title>Gitlab docs</title><link>https://linzeyan.github.io/zh-tw/notes/docs/gitlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/gitlab/</guid><description>add member by project Admin Area -&amp;gt; Settings -&amp;gt; General -&amp;gt; LDAP settings -&amp;gt; Lock memberships to LDAP synchronization -&amp;gt; Cancel backup cronjob # Backup Gitlab configs 1 0 * * * /usr/bin/tar -zcf /var/opt/gitlab/backups/`date +%Y_%m_%d`_gitlab_config.tar.gz /etc/gitlab &amp;amp;&amp;gt; /tmp/backup.log # Backup Gitlab data 1 1 * * * /usr/bin/gitlab-backup create STRATEGY=copy BACKUP=`date +%Y_%m_%d` &amp;amp;&amp;gt;&amp;gt; /tmp/backup.log # Rotate 0 2 * * * /usr/bin/rm -f `find /data/backups/ -name &amp;#34;*.tar*&amp;#34; -mtime +15` gitlab-ci.</description></item><item><title>Go Snippet</title><link>https://linzeyan.github.io/zh-tw/notes/go/snippet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/snippet/</guid><description>ETCD TTL func main() { // 创建 etcd 客户端 cli, err := clientv3.New(clientv3.Config{ Endpoints: []string{&amp;#34;localhost:2379&amp;#34;}, DialTimeout: 5 * time.Second, }) if err != nil { fmt.Println(&amp;#34;Error connecting to etcd:&amp;#34;, err) return } defer cli.Close() // 设置 TTL (单位为秒) ttl := int64(10) // 例如 10 秒 resp, err := cli.Grant(context.TODO(), ttl) if err != nil { fmt.Println(&amp;#34;Error creating lease:&amp;#34;, err) return } // 使用 Lease ID 进行 Put 操作 _, err = cli.</description></item><item><title>Go Tools</title><link>https://linzeyan.github.io/zh-tw/notes/go/tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/tools/</guid><description>tools benchstat go install golang.org/x/perf/cmd/benchstat@latest deadcode go install golang.org/x/tools/cmd/deadcode@latest httpstat It&amp;rsquo;s like curl -v, with colours. go get github.com/davecheney/httpstat jsonnet This an implementation of Jsonnet in pure Go go get github.com/google/go-jsonnet/cmd/jsonnet migrate go install -tags &amp;#39;mysql,sqlite,sqlite3&amp;#39; github.com/golang-migrate/migrate/v4/cmd/migrate@latest protobuf go install google.golang.org/protobuf/cmd/protoc-gen-go@lastest go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@lastest go install github.com/google/gnostic/cmd/protoc-gen-openapi@latest gosec Golang security checker go get -u github.com/securego/gosec/cmd/gosec govulncheck go install golang.org/x/vuln/cmd/govulncheck@latest vegeta HTTP load testing tool and library go get -u github.</description></item><item><title>GPG Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/gpg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/gpg/</guid><description>Install brew install gnupg Generate gpg --full-generate-key gpg --list-secret-keys Generate Problem $ gpg --full-generate-key gpg: Sorry, no terminal at all requested - can&amp;#39;t get input Comment out no-tty in ~/.gnupg/gpg.conf
Add to git gpg --armor --export 51ADF7101CA64B2508AE29EEC279555531A1DD62 Set .gitconfig git config user.email zeyanlin@outlook.com git config user.name Ricky git config user.signingkey 51ADF7101CA64B2508AE29EEC279555531A1DD62 git config commit.gpgsign true Delete key gpg --delete-secret-keys 51ADF7101CA64B2508AE29EEC279555531A1DD62 Backup key # https://www.jwillikers.com/backup-and-restore-a-gpg-key gpg --list-secret-keys --keyid-format LONG # Export key as a file, replace email-address and Enter the private key’s passphrase gpg -o private.</description></item><item><title>K8s Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/k8s/</guid><description>cert-manager cert-manager Route53 IAM Role Cert Manager Resource Cert Generate Resource Cert Ingress Resource # install the cert-manager CustomResourceDefinition resources kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.1/cert-manager.crds.yaml # Add the Jetstack Helm repository helm repo add jetstack https://charts.jetstack.io helm repo update # install the cert-manager helm chart helm install \ cert-manager jetstack/cert-manager \ --namespace cert-manager \ --create-namespace \ --version v1.13.1 \ --set installCRDs=true --set prometheus.enabled=false \ --set webhook.timeoutSeconds=4 # uninstalling helm delete my-release kubectl delete -f https://github.</description></item><item><title>Linux docs</title><link>https://linzeyan.github.io/zh-tw/notes/docs/linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/linux/</guid><description>docker.service ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --bip 10.255.0.1/16 --containerd=/run/containerd/containerd.sock --insecure-registry hub.srjob.co:8888 --insecure-registry registry.knowhow.fun gd.service [Unit] Description=Fetch DNS After=network.target After=mysql.service [Service] WorkingDirectory=/data/dns ExecStart=/data/dns/gd -o hourly ExecReload=/bin/kill -s HUP $MAINPID Restart=always [Install] WantedBy=multi-user.target openresty.service [Unit] Description=The OpenResty Application Platform After=syslog.target network-online.target remote-fs.target nss-lookup.target Wants=network-online.target [Service] Type=forking WorkingDirectory=/data/config/nginx PIDFile=/data/config/nginx/logs/nginx.pid ExecStartPre=/usr/bin/chown -R root:root /data/nginx ExecStartPre=/usr/bin/rm -f /data/nginx/logs/nginx.pid ExecStartPre=/usr/local/openresty/nginx/sbin/nginx -p /data/nginx -t ExecStart=/usr/local/openresty/nginx/sbin/nginx -p /data/nginx ExecReload=/bin/kill -s HUP $MAINPID ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /data/nginx/logs/nginx.</description></item><item><title>mermaid notes</title><link>https://linzeyan.github.io/zh-tw/notes/docs/mermaid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/mermaid/</guid><description>details 看我 你看不到我 看不到我 class classDiagram Class01 &amp;lt;|-- AveryLongClass : Cool Class03 _-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --&amp;gt; C2 : Where am i? Class09 --_ C3 Class09 --|&amp;gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 &amp;lt;--&amp;gt; C2: Cool label classDiagram flow-link flowchart LR A --o B B --x C D o--o E E &amp;lt;--&amp;gt; F F x--x G flowchart flow-link1 code flowchart flow-shapes graph LR id1[方框] id2(帶有圓角的方框) id3([體育場形狀]) id4[[子例程]] id5[(圓柱狀)] id6((圓形)) id7&amp;gt;非對稱形狀] id8{菱形} id9{{六角形}} id10[/平行四邊形 1/] id11[\平行四邊形 2\] id12[/梯形 1\] id13[\梯形 2/] id14(((雙圓))) flowchart flow-subgraphs flowchart TD c1--&amp;gt;a2 subgraph one a1--&amp;gt;a2 end subgraph &amp;#34;`**two**`&amp;#34; b1--&amp;gt;b2 end subgraph three c1--&amp;gt;c2 end flowchart gantt gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d gantt git gitGraph commit commit branch develop checkout develop commit commit checkout main merge develop commit commit git er erDiagram CUSTOMER }|.</description></item><item><title>Network docs</title><link>https://linzeyan.github.io/zh-tw/notes/docs/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/network/</guid><description>Synology Active Backup for Bussiness backup task failed Due to IP change last week Firewall policy create NAS_to_ESXi。 虛擬機器 -&amp;gt; 任務清單 -&amp;gt; 刪除任務。 虛擬機器 -&amp;gt; VMware vSphere -&amp;gt; 管理 Hypervisor -&amp;gt; 刪除舊的 IP，新增新的 IP。 Set LACP for Synology NAS and NETGEAR switch NETGEAR Switching -&amp;gt; LAG -&amp;gt; LAG Configuration -&amp;gt; ch1 -&amp;gt; 41、42 -&amp;gt; Apply。 ch1 -&amp;gt; Description: NAS、LAG Type:LACP -&amp;gt; Apply。 Switching -&amp;gt; VLAN -&amp;gt; Port PVID Configuration -&amp;gt; g41、g42 PVID:99、VLAN Member:10-14,17-23,99,101、VLAN Tag:10-14,17-23,99,101 -&amp;gt; Apply。 Synology 控制台 -&amp;gt; 網路 -&amp;gt; 網路介面 -&amp;gt; 新增 Bond。 Set NAT in FortiGate 1.</description></item><item><title>Network Related Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/network/</guid><description> Check port status # `(echo &amp;gt;/dev/tcp/${host}/${port})` (echo &amp;gt;/dev/tcp/192.168.57.24/80) &amp;amp;&amp;gt;/dev/null &amp;amp;&amp;amp; echo &amp;#34;open&amp;#34; || echo &amp;#34;closed&amp;#34; timeout 1 bash -c &amp;#39;&amp;gt;/dev/tcp/192.168.57.24/80 &amp;amp;&amp;gt;/dev/null&amp;#39; &amp;amp;&amp;amp; echo &amp;#34;open&amp;#34; || echo &amp;#34;closed&amp;#34; timeout 1 bash -c &amp;#39;&amp;gt;/dev/tcp/192.168.57.24/80&amp;#39; &amp;amp;&amp;amp; echo &amp;#34;open&amp;#34; || echo &amp;#34;closed&amp;#34; Block subnets ip route add blackhole 192.168.0.0/24</description></item><item><title>Nginx docs</title><link>https://linzeyan.github.io/zh-tw/notes/docs/nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/nginx/</guid><description>map # map map $remote_addr $limit_key { 35.229.201.209 &amp;#34;&amp;#34;; default $binary_remote_addr; } # wss.conf limit_req_zone $limit_key zone=websocket:10m rate=20r/s; limit_req_status 499; server { location = / { limit_req zone=websocket nodelay; limit_req_log_level warn; } } rewrite 1 # https://localhost/img/nginx.svg can access /data/nginxconfig.io/src/static/nginx.svg location /img { rewrite &amp;#39;^/img/(.*)$&amp;#39; /static/$1; } location /static { root /data/nginxconfig.io/src; index nginx.svg; } 2 # https://localhost/photo/nginx.svg can access /data/nginxconfig.io/src/static/nginx.svg location /photo { root /data/nginxconfig.io/src; try_files $uri /$uri @pic; } location @pic { rewrite &amp;#39;^/photo/(.</description></item><item><title>Pandoc Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/pandoc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/pandoc/</guid><description> texlive macOS # brew install textlive # npm i -g mermaid-filter # Render mermaid pandoc -F mermaid-filter -o readme.pdf readme.md Ubuntu # sudo apt install pandoc -y # sudo apt-get -y install texlive-latex-recommended texlive-pictures texlive-latex-extra texlive-fonts-recommended # npm i -g mermaid-filter pandoc -F mermaid-filter -o readme.pdf readme.md</description></item><item><title>Redis Install Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/redis/</guid><description> Install # Ubuntu22.04 sudo add-apt-repository ppa:redislabs/redis sudo apt install redis-server</description></item><item><title>SSH Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/ssh/</guid><description> Generate ssh key # RSA ssh-keygen -m PEM -t rsa -b 4096 -C &amp;#34;zeyanlin@outlook.com&amp;#34; # ED25519 ssh-keygen -t ed25519 -C &amp;#34;dev&amp;#34; -f ~/.ssh/ed25519 ssh config Host private.example.com ProxyCommand /usr/local/bin/cloudflared access ssh --hostname %h</description></item><item><title>Vagrant docs</title><link>https://linzeyan.github.io/zh-tw/notes/docs/vagrant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/vagrant/</guid><description> Vagrantfile template docker Nginx hyperv CentOS7 Win2019 virtualbox Vagrantfile vmware Vagrantfile multi Vagrantfile others common Vagrantfile Metasploitable3 Vagrantfile</description></item><item><title>Zabbix docs</title><link>https://linzeyan.github.io/zh-tw/notes/docs/zabbix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/zabbix/</guid><description>send alert Use Webhook, Create Channel and Webhook in Mattermost, and put script to $(grep AlertScriptsPath /etc/zabbix/zabbix_server.conf). Create Media types in Zabbix(Administration -&amp;gt; Medai types). Add media to user(Administration -&amp;gt; Users -&amp;gt; Media). Create action(Configuration -&amp;gt; Actions -&amp;gt; Trigger actions)。 Debug(Write log in script). Media types: PROBLEM:\nProblem started at {EVENT.TIME} on {EVENT.DATE}\n 問題: {EVENT.NAME}\n 主機: {HOST.NAME}\nSeverity: {EVENT.SEVERITY}\n 目前數值: {EVENT.OPDATA}\n 問題 ID: {EVENT.ID}\n{TRIGGER.URL} RECOVERY:\nProblem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.</description></item><item><title>Array</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/array/</guid><description> array package main import ( &amp;#34;fmt&amp;#34; ) func main() { a := [5]int{1, 2, 3, 4, 5} t := a[3:4:4] fmt.Println(t[0]) } A. 3 B. 4 C. compilation error Answer Try it B</description></item><item><title>Channel</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/channel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/channel/</guid><description>channel package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { ch := make(chan int, 1000) go func() { for i := 0; i &amp;lt; 10; i++ { ch &amp;lt;- i } }() go func() { for { a, ok := &amp;lt;-ch if !ok { fmt.Println(&amp;#34;close&amp;#34;) return } fmt.Println(&amp;#34;a: &amp;#34;, a) } }() close(ch) fmt.Println(&amp;#34;ok&amp;#34;) time.Sleep(time.Second * 100) } Answer Try it ok panic: send on closed channel channel1 package main import ( &amp;#34;fmt&amp;#34; ) func main() { c := make(chan int) close(c) val, _ := &amp;lt;-c fmt.</description></item><item><title>Context</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/context/</guid><description> context package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; ) func f(ctx context.Context) { context.WithValue(ctx, &amp;#34;foo&amp;#34;, -6) } func main() { ctx := context.TODO() f(ctx) fmt.Println(ctx.Value(&amp;#34;foo&amp;#34;)) } A. -6 B. 0 C. &amp;lt;nil&amp;gt; D: panic Answer Try it C context1 package main import( &amp;#34;fmt&amp;#34; &amp;#34;encoding/json&amp;#34; &amp;#34;context&amp;#34; ) func main() { data, _ := json.Marshal(context.WithValue(context.Background(), &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;)) fmt.Println(string(data)) } Answer Try it {"Context":{}}</description></item><item><title>Defer</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/defer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/defer/</guid><description>defer package main import ( &amp;#34;fmt&amp;#34; ) func main() { defer_call() } func defer_call() { defer func() { fmt.Println(&amp;#34;1&amp;#34;) }() defer func() { fmt.Println(&amp;#34;2&amp;#34;) }() defer func() { fmt.Println(&amp;#34;3&amp;#34;) }() panic(&amp;#34;4&amp;#34;) } Answer Try it 3 2 1 panic: 4 defer1 package main import ( &amp;#34;fmt&amp;#34; ) type Person struct { age int } func main() { person := &amp;amp;Person{28} defer fmt.Println(person.age) defer func(p *Person) { fmt.Println(p.age) }(person) defer func() { fmt.</description></item><item><title>Goroutine</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/goroutine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/goroutine/</guid><description> goroutine package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { ch1 := make(chan int) go fmt.Println(&amp;lt;-ch1) ch1 &amp;lt;- 5 time.Sleep(1 * time.Second) } A. 5 B. deadlock C. compilation error Answer Try it B</description></item><item><title>Interface</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/interface/</guid><description>interface package main import ( &amp;#34;fmt&amp;#34; ) type People interface { Show() } type Student struct{} func (stu *Student) Show() { } func live() People { var stu *Student return stu } func main() { if live() == nil { fmt.Println(&amp;#34;AAAAAAA&amp;#34;) } else { fmt.Println(&amp;#34;BBBBBBB&amp;#34;) } } Answer Try it BBBBBBB interface1 package main import ( &amp;#34;fmt&amp;#34; ) type People interface { Speak(string) string } type Student struct{} func (stu *Student) Speak(think string) (talk string) { if think == &amp;#34;love&amp;#34; { talk = &amp;#34;You are a good boy&amp;#34; } else { talk = &amp;#34;hi&amp;#34; } return } func main() { var peo People = Student{} think := &amp;#34;love&amp;#34; fmt.</description></item><item><title>Iota</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/iota/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/iota/</guid><description> iota package main import &amp;#34;fmt&amp;#34; const ( x = iota _ y z = &amp;#34;zz&amp;#34; k p = iota ) func main() { fmt.Println(x, y, z, k, p) } Answer Try it 0 2 zz zz 5 iota1 package main import &amp;#34;fmt&amp;#34; const ( a = iota b = iota ) const ( name = &amp;#34;name&amp;#34; c = iota d = iota ) func main() { fmt.Println(a, b, c, d) } Answer Try it 0 1 1 2</description></item><item><title>JSON</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/json/</guid><description>json package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) type AutoGenerated struct { Age int `json:&amp;#34;age&amp;#34;` Name string `json:&amp;#34;name&amp;#34;` Child []int `json:&amp;#34;child&amp;#34;` } func main() { jsonStr1 := `{&amp;#34;age&amp;#34;: 14,&amp;#34;name&amp;#34;: &amp;#34;potter&amp;#34;, &amp;#34;child&amp;#34;:[1,2,3]}` a := AutoGenerated{} json.Unmarshal([]byte(jsonStr1), &amp;amp;a) aa := a.Child fmt.Println(aa) jsonStr2 := `{&amp;#34;age&amp;#34;: 12,&amp;#34;name&amp;#34;: &amp;#34;potter&amp;#34;, &amp;#34;child&amp;#34;:[3,4,5,7,8,9]}` json.Unmarshal([]byte(jsonStr2), &amp;amp;a) fmt.Println(aa) } A. [1 2 3] [1 2 3] B. [1 2 3] [3 4 5] C. [1 2 3] [3 4 5 6 7 8 9] D.</description></item><item><title>Len</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/len/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/len/</guid><description>len package main func main() { var x *struct { s [][32]byte } println(len(x.s[99])) } A. panic B. compilation error C. 32 D. 0 Answer Try it C len1 package main const s = &amp;#34;Go101.org&amp;#34; // len(s) == 9 // 1 &amp;lt;&amp;lt; 9 == 512 // 512 / 128 == 4 var a byte = 1 &amp;lt;&amp;lt; len(s) / 128 var b byte = 1 &amp;lt;&amp;lt; len(s[:]) / 128 func main() { println(a, b) } A: 0 0 B: 0 4 C: 4 0 D: 4 4 Answer Try it C len2 package main var s = &amp;#34;Go101.</description></item><item><title>Map</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/map/</guid><description> map package main import &amp;#34;fmt&amp;#34; type Student struct { Name string } var list map[string]Student func main() { list = make(map[string]Student) student := Student{&amp;#34;Aceld&amp;#34;} list[&amp;#34;student&amp;#34;] = student list[&amp;#34;student&amp;#34;].Name = &amp;#34;LDB&amp;#34; fmt.Println(list[&amp;#34;student&amp;#34;]) } Answer Try it compilation error cannot assign to struct field list["student"].Name in map map1 package main func main() { m := make(map[int]int, 3) x := len(m) m[1] = m[1] y := len(m) println(x, y) } Answer Try it 0 1</description></item><item><title>Print</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/print/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/print/</guid><description> print package main import &amp;#34;fmt&amp;#34; type T struct { x int } func (t T) String() string { return &amp;#34;boo&amp;#34; } func main() { t := T{123} fmt.Printf(&amp;#34;%v\n&amp;#34;, t) fmt.Printf(&amp;#34;%#v\n&amp;#34;, t) } Answer Try it boo main.T{x:123} print1 package main import ( &amp;#34;fmt&amp;#34; ) func f(a ...int) { fmt.Printf(&amp;#34;%#v\n&amp;#34;, a) } func main() { f() } Answer Try it []int(nil)</description></item><item><title>Race</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/race/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/race/</guid><description> race type Stats struct { mutex sync.Mutex counters map[string]int } func (s *Stats) Snapshot() map[string]int { s.mutex.Lock() defer s.mutex.Unlock() return s.counters } func (s *Stats) Add(name string, num int) { s.mutex.Lock() defer s.mutex.Unlock() s.counters[name] = num } Answer func (s *Stats) Snapshot() map[string]int { s.mutex.Lock() defer s.mutex.Unlock() result := make(map[string]int, len(s.counters)) for k, v := range s.counters { result[k] = v } return result }</description></item><item><title>Select</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/select/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/select/</guid><description>select package main import &amp;#34;sync&amp;#34; func main() { var wg sync.WaitGroup foo := make(chan int) bar := make(chan int) wg.Add(1) go func() { defer wg.Done() select { case foo &amp;lt;- &amp;lt;-bar: default: println(&amp;#34;default&amp;#34;) } }() wg.Wait() } Answer Try it fatal error: all goroutines are asleep - deadlock! select1 package main import &amp;#34;fmt&amp;#34; func main() { ch1 := make(chan int) ch2 := make(chan int) go func() { ch1 &amp;lt;- 1 }() go func() { select { case &amp;lt;-ch1: case ch2 &amp;lt;- 2: } }() fmt.</description></item><item><title>Slice</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/slice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/slice/</guid><description>slice package main import ( &amp;#34;fmt&amp;#34; ) func main() { var s1 []int var s2 = []int{} if __ == nil { fmt.Println(&amp;#34;nil slice&amp;#34;) } if __ != nil { fmt.Println(&amp;#34;empty slice&amp;#34;) } } A. s1, s2 B. s2, s1 C. s1, s1 D. s2, s2 Answer Try it A slice1 package main import ( &amp;#34;fmt&amp;#34; ) func main() { s := [3]int{1, 2, 3} a := s[:0] b := s[:2] c := s[1:2:cap(s)] fmt.</description></item><item><title>Variable</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/variable/</guid><description>variable A. p.name B. (&amp;amp;p).name C. (*p).name D. p-&amp;gt;name Answer AC variable1 package main import ( &amp;#34;fmt&amp;#34; ) func main() { var ans float64 = 15 + 25 + 5.2 fmt.Println(ans) } A. 45 B. 45.0 C. 45.2 D. compliation error Answer Try it C variable2 package main import ( &amp;#34;fmt&amp;#34; ) func main() { var ans float64 = 3 / 2 fmt.Println(ans) } A. 1.5 B. 1 C. 0 D.</description></item><item><title>Elasticsearch Notes</title><link>https://linzeyan.github.io/zh-tw/notes/elasticsearch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/elasticsearch/</guid><description>Data too large [parent] Data too large, data for [&amp;lt;http_request&amp;gt;] would be [123848638/118.1mb], which is larger than the limit of [123273216/117.5mb], real usage: [120182112/114.6mb], new bytes reserved: [3666526/3.4mb]
https://www.elastic.co/guide/en/elasticsearch/reference/7.14/fix-common-cluster-issues.html#circuit-breaker-errors</description></item><item><title>Go Libraries</title><link>https://linzeyan.github.io/zh-tw/notes/go/libraries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/libraries/</guid><description> Data ML https://github.com/sjwhitworth/golearn https://github.com/gorse-io/gorse https://github.com/gorgonia/gorgonia https://github.com/cdipaolo/goml https://github.com/galeone/tfgo data https://github.com/gonum/gonum https://github.com/gonum/plot https://github.com/vdobler/chart https://github.com/rocketlaunchr/dataframe-go https://github.com/cpmech/gosl https://github.com/montanaflynn/stats https://github.com/nytlabs/streamtools</description></item><item><title>Input-Method Notes</title><link>https://linzeyan.github.io/zh-tw/notes/input-method/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/input-method/</guid><description> 類別 名稱 說明 PC weasel 小狼毫 適用於 Windows 係統的開源輸入法 PC squirrel 鼠須管 適用於 macOS 的開源輸入法 PC ibus-rime 適用於 Linux 係統的開源輸入法 PC openvanilla 專門針對 macOS 開發的開源輸入法 Mobile fcitx5-android 適用於 Android 係統的開源輸入法，從 Fcitx 5 移植而來。 Mobile trime 同文 適用於 Android 係統的開源輸入法，給予 rime 開發而來。 Mobile YuyanIme 雨燕 適用於 Android 係統的開源輸入法，基於 rime 定製開發。 Mobile Hamster 適用於 iOS 係統的開源輸入法，基於 rime 定製開發。 拚音 rime-ice 霧凇拚音，目前知名度最廣的拚音方案之一 拚音 rime-frost 白霜詞庫，基於霧凇拚音進行詞頻調整的拚音方案 拚音 oh-my-rime 薄荷拚音，基於霧凇拚音進行調整的輕量級拚音方案</description></item></channel></rss>