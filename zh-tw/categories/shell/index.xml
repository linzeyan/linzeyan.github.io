<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SHELL on Ricky</title><link>https://linzeyan.github.io/zh-tw/categories/shell/</link><description>Recent content in SHELL on Ricky</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Wed, 25 Sep 2024 09:23:00 +0800</lastBuildDate><atom:link href="https://linzeyan.github.io/zh-tw/categories/shell/index.xml" rel="self" type="application/rss+xml"/><item><title>Advanced Shell Scripting Techniques: Automating Complex Tasks with Bash</title><link>https://linzeyan.github.io/zh-tw/posts/20240925advanced-shell-scripting/</link><pubDate>Wed, 25 Sep 2024 09:23:00 +0800</pubDate><guid>https://linzeyan.github.io/zh-tw/posts/20240925advanced-shell-scripting/</guid><description>Advanced Shell Scripting Techniques: Automating Complex Tasks with Bash Advanced Shell Scripting Techniques: Automating Complex Tasks with Bash Use Built-in Commands Built-in commands execute faster because they don&amp;rsquo;t require loading an external process. Minimize Subshells Subshells can be expensive in terms of performance. # Inefficient output=$(cat file.txt) # Efficient output=$(&amp;lt;file.txt) Use Arrays for Bulk Data When handling a large amount of data, arrays can be more efficient and easier to manage than multiple variables.</description></item></channel></rss>