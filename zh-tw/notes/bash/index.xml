<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bash Notes on Ricky</title><link>https://linzeyan.github.io/zh-tw/notes/bash/</link><description>Recent content in Bash Notes on Ricky</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><atom:link href="https://linzeyan.github.io/zh-tw/notes/bash/index.xml" rel="self" type="application/rss+xml"/><item><title>Ansible Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/ansible/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/ansible/</guid><description> Lookup # List all plugins ansible-doc -t lookup -l # Use `ansible-doc -t lookup &amp;lt;plugin&amp;gt;` to see detail ansible-doc -t lookup ping winrm - console output 在 hyper-v 那台機器 Enable Winrm 之後 一直出現下面的錯誤。 在 group 加上一行即可
ansible_winrm_transport=ntlm
hyper-v01 | UNREACHABLE! =&amp;gt; { &amp;#34;changed&amp;#34;: false, &amp;#34;msg&amp;#34;: &amp;#34;ssl: the specified credentials were rejected by the server&amp;#34;, &amp;#34;unreachable&amp;#34;: true } - /etc/ansible/hosts ansible_user=administrator ansible_password=password ansible_port=5986 ansible_connection=winrm ansible_winrm_server_cert_validation=ignore ansible_winrm_transport=ntlm</description></item><item><title>Common Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/common/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/common/</guid><description>ab ab -n 20 -c 20 -k https://default.hddv1.com/error age # generate public and private keys age-keygen -o key.txt # encrypt file with public key age -r public_key -o file.txt.enc file.txt # encrypt file with ssh key age -R ~/.ssh/id_ed25519.pub file.txt &amp;gt; file.txt.enc # decrypt file age --decrypt -i key.txt file.txt.enc &amp;gt; file.txt awk # To lowercase uuidgen|awk &amp;#39;{print tolower($0)}&amp;#39; # output: 649612b0-0fa4-4b50-9b13-17279f602a43 # To uppercase echo &amp;#39;hello world&amp;#39;|awk &amp;#39;{print toupper($0)}&amp;#39; # output: HELLO WORLD # 提取子字符串: `substr(string, start, length)` echo &amp;#34;hello world&amp;#34; | awk &amp;#39;{print substr($0, 1, 5)}&amp;#39; # output: hello # 全局替換字符串中的正則表達式匹配項: `gsub(regex, replacement, string)` # 替換字符串中首次匹配的正則表達式: `sub(regex, replacement, string)` echo &amp;#34;hello world&amp;#34; | awk &amp;#39;{gsub(/world/, &amp;#34;everyone&amp;#34;); print $0}&amp;#39; # output: hello everyone # 將數字轉換為整數 echo &amp;#34;3.</description></item><item><title>Docker Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/docker/</guid><description>Build with secret Dockerfile # syntax = docker/dockerfile:1.6 FROM golang:1.21.1-alpine3.18 RUN --mount=type=secret,id=mysecret,target=/root/.ssh/id_rsa git clone git@gitlab.com:ricky/repo.git Command export DOCKER_BUILDKIT=1 docker build --secret id=mysecret,src=id_rsa -t image . Compose # Force pull image docker-compose up -d --pull always Create buildx instance # create buildx instance docker buildx create --name builder --bootstrap --driver docker-container # install emulators docker run --privileged --rm tonistiigi/binfmt --install all Create Network docker network create -d bridge --subnet 172.100.0.0/24 --gateway 172.</description></item><item><title>File Related Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/file/</guid><description>File create time 1. Find Inode $ stat dns.yaml File: dns.yaml Size: 1003 Blocks: 8 IO Block: 4096 regular file Device: ca01h/51713d Inode: 3595636 Links: 1 Access: (0644/-rw-r--r--) Uid: ( 1000/ ubuntu) Gid: ( 1000/ ubuntu) Access: 2022-05-03 12:59:59.996755279 +0800 Modify: 2021-12-10 18:27:54.157585209 +0800 Change: 2022-01-07 14:57:58.619727878 +0800 Birth: - or
$ ls -i dns.yaml 3585173 dns.yaml 2. Find Filesystem $ df dns.yaml Filesystem 1K-blocks Used Available Use% Mounted on /dev/root 101583780 25703988 75863408 26% / 3.</description></item><item><title>Git Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/git/</guid><description>Search in git git rev-list --all | xargs git grep -F &amp;#39;&amp;#39; Count commits git rev-list --count main View a file of another branch git show dev:main.go Take a backup of untracked files git ls-files --others --exclude-standard -z | xargs -0 tar rvf backup-untracked.zip Submodule # Add submodule git submodule add -b main git@github.com:linzeyan/toha.git themes/toha # Update submodule git submodule update --init --remote # Remove submodule modulePath=&amp;#34;themes/toha&amp;#34; git submodule deinit -f ${modulePath} git rm ${modulePath} rm -rf .</description></item><item><title>Gitlab Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/gitlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/gitlab/</guid><description>cleanup doc
# artifacts gitlab-rake gitlab:cleanup:orphan_job_artifact_files # expire session gitlab-rake gitlab:cleanup:sessions:active_sessions_lookup_keys # lfs gitlab-rake gitlab:cleanup:orphan_lfs_files # project gitlab-rake gitlab:cleanup:project_uploads gitlab-rake gitlab:cleanup:remote_upload_files # registry gitlab-ctl registry-garbage-collect gitlab-ctl registry-garbage-collect -m migration 1. Copy Old Crontab、Old /etc/gitlab、update-ca-trust 2. Version should be same 3. Copy newest backup file 4. Stop Services gitlab-ctl stop unicorn gitlab-ctl stop puma gitlab-ctl stop sidekiq gitlab-ctl status 5. Restore File must put in /var/opt/gitlab/backup
chown git:git backupfile gitlab-backup restore BACKUP=11493107454_2018_04_25_10.</description></item><item><title>GPG Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/gpg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/gpg/</guid><description>Install brew install gnupg Generate gpg --full-generate-key gpg --list-secret-keys Generate Problem $ gpg --full-generate-key gpg: Sorry, no terminal at all requested - can&amp;#39;t get input Comment out no-tty in ~/.gnupg/gpg.conf
Add to git gpg --armor --export 51ADF7101CA64B2508AE29EEC279555531A1DD62 Set .gitconfig git config user.email zeyanlin@outlook.com git config user.name Ricky git config user.signingkey 51ADF7101CA64B2508AE29EEC279555531A1DD62 git config commit.gpgsign true Delete key gpg --delete-secret-keys 51ADF7101CA64B2508AE29EEC279555531A1DD62 Backup key # https://www.jwillikers.com/backup-and-restore-a-gpg-key gpg --list-secret-keys --keyid-format LONG # Export key as a file, replace email-address and Enter the private key’s passphrase gpg -o private.</description></item><item><title>K8s Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/k8s/</guid><description>cert-manager cert-manager Route53 IAM Role Cert Manager Resource Cert Generate Resource Cert Ingress Resource # install the cert-manager CustomResourceDefinition resources kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.1/cert-manager.crds.yaml # Add the Jetstack Helm repository helm repo add jetstack https://charts.jetstack.io helm repo update # install the cert-manager helm chart helm install \ cert-manager jetstack/cert-manager \ --namespace cert-manager \ --create-namespace \ --version v1.13.1 \ --set installCRDs=true --set prometheus.enabled=false \ --set webhook.timeoutSeconds=4 # uninstalling helm delete my-release kubectl delete -f https://github.</description></item><item><title>Network Related Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/network/</guid><description> Check port status # `(echo &amp;gt;/dev/tcp/${host}/${port})` (echo &amp;gt;/dev/tcp/192.168.57.24/80) &amp;amp;&amp;gt;/dev/null &amp;amp;&amp;amp; echo &amp;#34;open&amp;#34; || echo &amp;#34;closed&amp;#34; timeout 1 bash -c &amp;#39;&amp;gt;/dev/tcp/192.168.57.24/80 &amp;amp;&amp;gt;/dev/null&amp;#39; &amp;amp;&amp;amp; echo &amp;#34;open&amp;#34; || echo &amp;#34;closed&amp;#34; timeout 1 bash -c &amp;#39;&amp;gt;/dev/tcp/192.168.57.24/80&amp;#39; &amp;amp;&amp;amp; echo &amp;#34;open&amp;#34; || echo &amp;#34;closed&amp;#34; Block subnets ip route add blackhole 192.168.0.0/24</description></item><item><title>Pandoc Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/pandoc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/pandoc/</guid><description> texlive macOS # brew install textlive # npm i -g mermaid-filter # Render mermaid pandoc -F mermaid-filter -o readme.pdf readme.md Ubuntu # sudo apt install pandoc -y # sudo apt-get -y install texlive-latex-recommended texlive-pictures texlive-latex-extra texlive-fonts-recommended # npm i -g mermaid-filter pandoc -F mermaid-filter -o readme.pdf readme.md</description></item><item><title>Redis Install Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/redis/</guid><description> Install # Ubuntu22.04 sudo add-apt-repository ppa:redislabs/redis sudo apt install redis-server</description></item><item><title>SSH Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/ssh/</guid><description> Generate ssh key # RSA ssh-keygen -m PEM -t rsa -b 4096 -C &amp;#34;zeyanlin@outlook.com&amp;#34; # ED25519 ssh-keygen -t ed25519 -C &amp;#34;dev&amp;#34; -f ~/.ssh/ed25519 ssh config Host private.example.com ProxyCommand /usr/local/bin/cloudflared access ssh --hostname %h</description></item></channel></rss>