<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on Ricky</title><link>https://linzeyan.github.io/zh-tw/notes/</link><description>Recent content in Notes on Ricky</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><atom:link href="https://linzeyan.github.io/zh-tw/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Ansible Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/ansible/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/ansible/</guid><description> Lookup # List all plugins ansible-doc -t lookup -l # Use `ansible-doc -t lookup &amp;lt;plugin&amp;gt;` to see detail ansible-doc -t lookup ping winrm - console output 在 hyper-v 那台機器 Enable Winrm 之後 一直出現下面的錯誤。 在 group 加上一行即可
ansible_winrm_transport=ntlm
hyper-v01 | UNREACHABLE! =&amp;gt; { &amp;#34;changed&amp;#34;: false, &amp;#34;msg&amp;#34;: &amp;#34;ssl: the specified credentials were rejected by the server&amp;#34;, &amp;#34;unreachable&amp;#34;: true } - /etc/ansible/hosts ansible_user=administrator ansible_password=password ansible_port=5986 ansible_connection=winrm ansible_winrm_server_cert_validation=ignore ansible_winrm_transport=ntlm</description></item><item><title>AWS Command</title><link>https://linzeyan.github.io/zh-tw/notes/aws/command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/aws/command/</guid><description>CloudFront # list distributions aws cloudfront list-distributions --query &amp;#39;*.Items[*].[Comment,Id,Aliases.Items[0],DefaultCacheBehavior.TargetOriginId]&amp;#39; --output table # create invalidation aws cloudfront create-invalidation --distribution-id EATDVGD171BHDS1 --paths &amp;#34;/*&amp;#34; ## check cloudfornt log enable or not for i in $(aws cloudfront list-distributions --output table --query &amp;#39;DistributionList.Items[*].Id&amp;#39; --profile route53 | sed &amp;#39;1,3d;$d&amp;#39; | awk &amp;#39;{print $2}&amp;#39;) do result=$(aws cloudfront get-distribution --id ${i} --query &amp;#39;Distribution.DistributionConfig.Logging&amp;#39; --profile route53 | jq .Enabled) if [[ &amp;#34;${result}&amp;#34; != &amp;#34;true&amp;#34; ]];then echo ${i} fi done EC2 # list aws ec2 describe-instances --query &amp;#39;Reservations[*].</description></item><item><title>AWS Configure</title><link>https://linzeyan.github.io/zh-tw/notes/aws/configure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/aws/configure/</guid><description> S3 Bucket Policy { &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;, &amp;#34;Statement&amp;#34;: [ { &amp;#34;Sid&amp;#34;: &amp;#34;AllowPublicRead&amp;#34;, &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;, &amp;#34;Principal&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;Action&amp;#34;: &amp;#34;s3:GetObject&amp;#34;, &amp;#34;Resource&amp;#34;: &amp;#34;arn:aws:s3:::bucketName/*&amp;#34; } ] } S3 CORS [ { &amp;#34;AllowedHeaders&amp;#34;: [&amp;#34;*&amp;#34;], &amp;#34;AllowedMethods&amp;#34;: [&amp;#34;GET&amp;#34;, &amp;#34;PUT&amp;#34;, &amp;#34;POST&amp;#34;, &amp;#34;DELETE&amp;#34;], &amp;#34;AllowedOrigins&amp;#34;: [&amp;#34;*&amp;#34;], &amp;#34;ExposeHeaders&amp;#34;: [ &amp;#34;x-amz-server-side-encryption&amp;#34;, &amp;#34;x-amz-request-id&amp;#34;, &amp;#34;x-amz-id-2&amp;#34; ], &amp;#34;MaxAgeSeconds&amp;#34;: 3000 } ] ECR Lifecycle Policy { &amp;#34;rules&amp;#34;: [ { &amp;#34;rulePriority&amp;#34;: 1, &amp;#34;description&amp;#34;: &amp;#34;Keep only the last 100 images&amp;#34;, &amp;#34;selection&amp;#34;: { &amp;#34;tagStatus&amp;#34;: &amp;#34;any&amp;#34;, &amp;#34;countType&amp;#34;: &amp;#34;imageCountMoreThan&amp;#34;, &amp;#34;countNumber&amp;#34;: 100 }, &amp;#34;action&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;expire&amp;#34; } } ] } ECR Lifecycle Policy1 { &amp;#34;rules&amp;#34;: [ { &amp;#34;rulePriority&amp;#34;: 1, &amp;#34;description&amp;#34;: &amp;#34;Remove images with certain tag&amp;#34;, &amp;#34;selection&amp;#34;: { &amp;#34;tagStatus&amp;#34;: &amp;#34;tagged&amp;#34;, &amp;#34;tagPrefixList&amp;#34;: [&amp;#34;tag1&amp;#34;, &amp;#34;tag2&amp;#34;], &amp;#34;countType&amp;#34;: &amp;#34;imageCountMoreThan&amp;#34;, &amp;#34;countNumber&amp;#34;: 0 }, &amp;#34;action&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;expire&amp;#34; } } ] } ECR Lifecycle Policy2 { &amp;#34;rules&amp;#34;: [ { &amp;#34;rulePriority&amp;#34;: 1, &amp;#34;description&amp;#34;: &amp;#34;Remove untagged images older than 14 days&amp;#34;, &amp;#34;selection&amp;#34;: { &amp;#34;tagStatus&amp;#34;: &amp;#34;untagged&amp;#34;, &amp;#34;countType&amp;#34;: &amp;#34;sinceImagePushed&amp;#34;, &amp;#34;countUnit&amp;#34;: &amp;#34;days&amp;#34;, &amp;#34;countNumber&amp;#34;: 14 }, &amp;#34;action&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;expire&amp;#34; } } ] }</description></item><item><title>AWS Terraform</title><link>https://linzeyan.github.io/zh-tw/notes/aws/terraform/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/aws/terraform/</guid><description> tf Provider provider.tf EC2 ec2.tf initial.bash Elastic IP elasticip.tf MQ mq.tf RDS rds.tf Security Group sg.tf VPC vpc.tf WAF waf.tf</description></item><item><title>Cloudflare docs</title><link>https://linzeyan.github.io/zh-tw/notes/docs/cloudflare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/cloudflare/</guid><description>Setting CloudFlare Worker for CORS addEventListener(&amp;#34;fetch&amp;#34;, (event) =&amp;gt; { event.respondWith(handleRequest(event.request)); }); async function handleRequest(request) { let response = await fetch(request); response = new Response(response.body, response); response.headers.set( &amp;#34;Access-Control-Allow-Origin&amp;#34;, &amp;#34;frontend-h5.shyc883.com&amp;#34; ); response.headers.set(&amp;#34;Access-Control-Allow-Methods&amp;#34;, &amp;#34;GET, OPTIONS, POST&amp;#34;); response.headers.set( &amp;#34;Access-Control-Allow-Headers&amp;#34;, &amp;#34;Content-Type, Authorization&amp;#34; ); response.headers.set(&amp;#34;Access-Control-Allow-Credentials&amp;#34;, true); return response; } Terraform_create_record terraform { required_providers { cloudflare = { source = &amp;#34;cloudflare/cloudflare&amp;#34; version = &amp;#34;~&amp;gt; 2.0&amp;#34; } } } provider &amp;#34;cloudflare&amp;#34; { email = &amp;#34;cloudflare@gmail.com&amp;#34; api_key = &amp;#34;1488ed0d2082ed36c010b773431fd9dcacde1&amp;#34; account_id = &amp;#34;06ae012a1ba907df24a220cd14a4fa8b&amp;#34; } resource &amp;#34;cloudflare_record&amp;#34; &amp;#34;gitlab&amp;#34; { zone_id = &amp;#34;92c6d5010fbacab27d464f4d79c11fce&amp;#34; name = &amp;#34;gitlab&amp;#34; value = &amp;#34;192.</description></item><item><title>Common Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/common/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/common/</guid><description>ab ab -n 20 -c 20 -k https://default.hddv1.com/error age # generate public and private keys age-keygen -o key.txt # encrypt file with public key age -r public_key -o file.txt.enc file.txt # encrypt file with ssh key age -R ~/.ssh/id_ed25519.pub file.txt &amp;gt; file.txt.enc # decrypt file age --decrypt -i key.txt file.txt.enc &amp;gt; file.txt certbot # Install sudo apt install certbot python3-certbot-nginx python3-certbot-dns-route53 # 1. Generating Wildcard Certificates sudo certbot certonly --manual --preferred-challenges=dns --server https://acme-v02.</description></item><item><title>Docker Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/docker/</guid><description>Build with secret Dockerfile # syntax = docker/dockerfile:1.6 FROM golang:1.21.1-alpine3.18 RUN --mount=type=secret,id=mysecret,target=/root/.ssh/id_rsa git clone git@gitlab.com:ricky/repo.git Command export DOCKER_BUILDKIT=1 docker build --secret id=mysecret,src=id_rsa -t image . Compose # Force pull image docker-compose up -d --pull always Create buildx instance # create buildx instance docker buildx create --name builder --bootstrap --driver docker-container # install emulators docker run --privileged --rm tonistiigi/binfmt --install all Create Network docker network create -d bridge --subnet 172.100.0.0/24 --gateway 172.</description></item><item><title>Docker docs</title><link>https://linzeyan.github.io/zh-tw/notes/docs/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/docker/</guid><description> docker-compose cAdvisor docker-compose.yaml prometheus.yaml Elasticsearch docker-compose.yaml local dev docker-compose.yaml NodeJS docker-compose.yaml rstudio docker-compose.yaml rsyncd docker-compose.yaml rsyncd.conf rsyncd.secrets rsync -auz --password-file=/tmp/pass dist user@hostip::myshare Dockerfile awscli Dockerfile buildx Dockerfile docker buildx build --push --platform linux/arm64,linux/amd64 -t zeyanlin/app . dind Dockerfile golang Dockerfile docker build --secret id=mysecret,src=id_rsa -t app . rstudio Dockerfile pkg.txt supervisord Dockerfile supervisord.conf service with supervisord Dockerfile</description></item><item><title>File Related Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/file/</guid><description>File create time 1. Find Inode $ stat dns.yaml File: dns.yaml Size: 1003 Blocks: 8 IO Block: 4096 regular file Device: ca01h/51713d Inode: 3595636 Links: 1 Access: (0644/-rw-r--r--) Uid: ( 1000/ ubuntu) Gid: ( 1000/ ubuntu) Access: 2022-05-03 12:59:59.996755279 +0800 Modify: 2021-12-10 18:27:54.157585209 +0800 Change: 2022-01-07 14:57:58.619727878 +0800 Birth: - or
$ ls -i dns.yaml 3585173 dns.yaml 2. Find Filesystem $ df dns.yaml Filesystem 1K-blocks Used Available Use% Mounted on /dev/root 101583780 25703988 75863408 26% / 3.</description></item><item><title>GCP Command</title><link>https://linzeyan.github.io/zh-tw/notes/gcp/command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/gcp/command/</guid><description>monitoring # list gcloud alpha monitoring policies list --project=&amp;#34;project-prod-a&amp;#34; &amp;gt;project-prod-a.yaml # update gcloud alpha monitoring policies update --policy-from-file=&amp;#34;project-prod-a.yaml&amp;#34; &amp;#34;project-prod-a&amp;#34; cloud storage # Create bucket gsutil mb -c standard -l asia-east2 gs://prod-a gsutil iam ch allUsers:objectViewer gs://prod-a # Upload files gsutil -m rsync -x &amp;#34;.svn/&amp;#34; -u -d -r srcDir gs://prod-a gsutil -m cp downloads/*.csv gs://prod-a/data/ # Create CORS file cat &amp;lt;&amp;lt; EOF &amp;gt; /data/cors.json [ { &amp;#34;origin&amp;#34;: [&amp;#34;*&amp;#34;], &amp;#34;responseHeader&amp;#34;: [&amp;#34;Access-Control-Allow-Origin&amp;#34;], &amp;#34;method&amp;#34;: [&amp;#34;GET&amp;#34;,&amp;#34;HEAD&amp;#34;,&amp;#34;DELETE&amp;#34;], &amp;#34;maxAgeSeconds&amp;#34;: 3600 } ] EOF # Set CORS gsutil cors set /data/cors.</description></item><item><title>Git Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/git/</guid><description>Search in git git rev-list --all | xargs git grep -F &amp;#39;&amp;#39; Count commits git rev-list --count main View a file of another branch git show dev:main.go Take a backup of untracked files git ls-files --others --exclude-standard -z | xargs -0 tar rvf backup-untracked.zip Submodule # Add submodule git submodule add -b main git@github.com:linzeyan/toha.git themes/toha # Update submodule git submodule update --init --remote # Remove submodule modulePath=&amp;#34;themes/toha&amp;#34; git submodule deinit -f ${modulePath} git rm ${modulePath} rm -rf .</description></item><item><title>Gitlab Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/gitlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/gitlab/</guid><description>cleanup doc
# artifacts gitlab-rake gitlab:cleanup:orphan_job_artifact_files # expire session gitlab-rake gitlab:cleanup:sessions:active_sessions_lookup_keys # lfs gitlab-rake gitlab:cleanup:orphan_lfs_files # project gitlab-rake gitlab:cleanup:project_uploads gitlab-rake gitlab:cleanup:remote_upload_files # registry gitlab-ctl registry-garbage-collect gitlab-ctl registry-garbage-collect -m migration 1. Copy Old Crontab、Old /etc/gitlab、update-ca-trust 2. Version should be same 3. Copy newest backup file 4. Stop Services gitlab-ctl stop unicorn gitlab-ctl stop puma gitlab-ctl stop sidekiq gitlab-ctl status 5. Restore File must put in /var/opt/gitlab/backup
chown git:git backupfile gitlab-backup restore BACKUP=11493107454_2018_04_25_10.</description></item><item><title>Gitlab docs</title><link>https://linzeyan.github.io/zh-tw/notes/docs/gitlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/gitlab/</guid><description>add member by project Admin Area -&amp;gt; Settings -&amp;gt; General -&amp;gt; LDAP settings -&amp;gt; Lock memberships to LDAP synchronization -&amp;gt; Cancel backup cronjob # Backup Gitlab configs 1 0 * * * /usr/bin/tar -zcf /var/opt/gitlab/backups/`date +%Y_%m_%d`_gitlab_config.tar.gz /etc/gitlab &amp;amp;&amp;gt; /tmp/backup.log # Backup Gitlab data 1 1 * * * /usr/bin/gitlab-backup create STRATEGY=copy BACKUP=`date +%Y_%m_%d` &amp;amp;&amp;gt;&amp;gt; /tmp/backup.log # Rotate 0 2 * * * /usr/bin/rm -f `find /data/backups/ -name &amp;#34;*.tar*&amp;#34; -mtime +15` gitlab-ci.</description></item><item><title>Go Tools</title><link>https://linzeyan.github.io/zh-tw/notes/go/tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/tools/</guid><description>tools httpstat It&amp;rsquo;s like curl -v, with colours. go get github.com/davecheney/httpstat jsonnet This an implementation of Jsonnet in pure Go go get github.com/google/go-jsonnet/cmd/jsonnet gosec Golang security checker go get -u github.com/securego/gosec/cmd/gosec vegeta HTTP load testing tool and library go get -u github.com/tsenart/vegeta dasel Select, put and delete data from JSON, TOML, YAML, XML and CSV files with a single tool. Supports conversion between formats and can be used as a Go package.</description></item><item><title>GPG Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/gpg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/gpg/</guid><description>Install brew install gnupg Generate gpg --full-generate-key gpg --list-secret-keys Generate Problem $ gpg --full-generate-key gpg: Sorry, no terminal at all requested - can&amp;#39;t get input Comment out no-tty in ~/.gnupg/gpg.conf
Add to git gpg --armor --export 51ADF7101CA64B2508AE29EEC279555531A1DD62 Set .gitconfig git config user.email zeyanlin@outlook.com git config user.name Ricky git config user.signingkey 51ADF7101CA64B2508AE29EEC279555531A1DD62 git config commit.gpgsign true Delete key gpg --delete-secret-keys 51ADF7101CA64B2508AE29EEC279555531A1DD62 Backup key # https://www.jwillikers.com/backup-and-restore-a-gpg-key gpg --list-secret-keys --keyid-format LONG # Export key as a file, replace email-address and Enter the private key’s passphrase gpg -o private.</description></item><item><title>K8s Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/k8s/</guid><description>cert-manager cert-manager Route53 IAM Role Cert Manager Resource Cert Generate Resource Cert Ingress Resource # install the cert-manager CustomResourceDefinition resources kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.1/cert-manager.crds.yaml # Add the Jetstack Helm repository helm repo add jetstack https://charts.jetstack.io helm repo update # install the cert-manager helm chart helm install \ cert-manager jetstack/cert-manager \ --namespace cert-manager \ --create-namespace \ --version v1.13.1 \ --set installCRDs=true --set prometheus.enabled=false \ --set webhook.timeoutSeconds=4 # uninstalling helm delete my-release kubectl delete -f https://github.</description></item><item><title>Linux docs</title><link>https://linzeyan.github.io/zh-tw/notes/docs/linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/linux/</guid><description>docker.service ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --bip 10.255.0.1/16 --containerd=/run/containerd/containerd.sock --insecure-registry hub.srjob.co:8888 --insecure-registry registry.knowhow.fun gd.service [Unit] Description=Fetch DNS After=network.target After=mysql.service [Service] WorkingDirectory=/data/dns ExecStart=/data/dns/gd -o hourly ExecReload=/bin/kill -s HUP $MAINPID Restart=always [Install] WantedBy=multi-user.target openresty.service [Unit] Description=The OpenResty Application Platform After=syslog.target network-online.target remote-fs.target nss-lookup.target Wants=network-online.target [Service] Type=forking WorkingDirectory=/data/config/nginx PIDFile=/data/config/nginx/logs/nginx.pid ExecStartPre=/usr/bin/chown -R root:root /data/nginx ExecStartPre=/usr/bin/rm -f /data/nginx/logs/nginx.pid ExecStartPre=/usr/local/openresty/nginx/sbin/nginx -p /data/nginx -t ExecStart=/usr/local/openresty/nginx/sbin/nginx -p /data/nginx ExecReload=/bin/kill -s HUP $MAINPID ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /data/nginx/logs/nginx.</description></item><item><title>mermaid notes</title><link>https://linzeyan.github.io/zh-tw/notes/docs/mermaid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/mermaid/</guid><description>details 看我 你看不到我 看不到我 link flowchart LR A --o B B --x C D o--o E E &amp;lt;--&amp;gt; F F x--x G shapes graph LR id1[方框] id2(帶有圓角的方框) id3([體育場形狀]) id4[[子例程]] id5[(圓柱狀)] id6((圓形)) id7&amp;gt;非對稱形狀] id8{菱形} id9{{六角形}} id10[/平行四邊形 1/] id11[\平行四邊形 2\] id12[/梯形 1\] id13[\梯形 2/] id14(((雙圓))) subgraphs flowchart TD c1--&amp;gt;a2 subgraph one a1--&amp;gt;a2 end subgraph &amp;#34;`**two**`&amp;#34; b1--&amp;gt;b2 end subgraph three c1--&amp;gt;c2 end sequence sequenceDiagram participant Alice participant Bob Alice-&amp;gt;&amp;gt;John: Hello John, how are you?</description></item><item><title>Network docs</title><link>https://linzeyan.github.io/zh-tw/notes/docs/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/network/</guid><description>Synology Active Backup for Bussiness backup task failed Due to IP change last week Firewall policy create NAS_to_ESXi。 虛擬機器 -&amp;gt; 任務清單 -&amp;gt; 刪除任務。 虛擬機器 -&amp;gt; VMware vSphere -&amp;gt; 管理 Hypervisor -&amp;gt; 刪除舊的 IP，新增新的 IP。 Set LACP for Synology NAS and NETGEAR switch NETGEAR Switching -&amp;gt; LAG -&amp;gt; LAG Configuration -&amp;gt; ch1 -&amp;gt; 41、42 -&amp;gt; Apply。 ch1 -&amp;gt; Description: NAS、LAG Type:LACP -&amp;gt; Apply。 Switching -&amp;gt; VLAN -&amp;gt; Port PVID Configuration -&amp;gt; g41、g42 PVID:99、VLAN Member:10-14,17-23,99,101、VLAN Tag:10-14,17-23,99,101 -&amp;gt; Apply。 Synology 控制台 -&amp;gt; 網路 -&amp;gt; 網路介面 -&amp;gt; 新增 Bond。 Set NAT in FortiGate 1.</description></item><item><title>Network Related Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/network/</guid><description> Check port status # `(echo &amp;gt;/dev/tcp/${host}/${port})` (echo &amp;gt;/dev/tcp/192.168.57.24/80) &amp;amp;&amp;gt;/dev/null &amp;amp;&amp;amp; echo &amp;#34;open&amp;#34; || echo &amp;#34;closed&amp;#34; timeout 1 bash -c &amp;#39;&amp;gt;/dev/tcp/192.168.57.24/80 &amp;amp;&amp;gt;/dev/null&amp;#39; &amp;amp;&amp;amp; echo &amp;#34;open&amp;#34; || echo &amp;#34;closed&amp;#34; timeout 1 bash -c &amp;#39;&amp;gt;/dev/tcp/192.168.57.24/80&amp;#39; &amp;amp;&amp;amp; echo &amp;#34;open&amp;#34; || echo &amp;#34;closed&amp;#34; Block subnets ip route add blackhole 192.168.0.0/24</description></item><item><title>Nginx docs</title><link>https://linzeyan.github.io/zh-tw/notes/docs/nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/nginx/</guid><description>map # map map $remote_addr $limit_key { 35.229.201.209 &amp;#34;&amp;#34;; default $binary_remote_addr; } # wss.conf limit_req_zone $limit_key zone=websocket:10m rate=20r/s; limit_req_status 499; server { location = / { limit_req zone=websocket nodelay; limit_req_log_level warn; } } rewrite 1 # https://localhost/img/nginx.svg can access /data/nginxconfig.io/src/static/nginx.svg location /img { rewrite &amp;#39;^/img/(.*)$&amp;#39; /static/$1; } location /static { root /data/nginxconfig.io/src; index nginx.svg; } 2 # https://localhost/photo/nginx.svg can access /data/nginxconfig.io/src/static/nginx.svg location /photo { root /data/nginxconfig.io/src; try_files $uri /$uri @pic; } location @pic { rewrite &amp;#39;^/photo/(.</description></item><item><title>Pandoc Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/pandoc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/pandoc/</guid><description> texlive macOS # brew install textlive # npm i -g mermaid-filter # Render mermaid pandoc -F mermaid-filter -o readme.pdf readme.md Ubuntu # sudo apt install pandoc -y # sudo apt-get -y install texlive-latex-recommended texlive-pictures texlive-latex-extra texlive-fonts-recommended # npm i -g mermaid-filter pandoc -F mermaid-filter -o readme.pdf readme.md</description></item><item><title>Redis Install Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/redis/</guid><description> Install # Ubuntu22.04 sudo add-apt-repository ppa:redislabs/redis sudo apt install redis-server</description></item><item><title>SSH Command</title><link>https://linzeyan.github.io/zh-tw/notes/bash/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/bash/ssh/</guid><description> Generate ssh key # RSA ssh-keygen -m PEM -t rsa -b 4096 -C &amp;#34;zeyanlin@outlook.com&amp;#34; # ED25519 ssh-keygen -t ed25519 -C &amp;#34;dev&amp;#34; -f ~/.ssh/ed25519</description></item><item><title>Vagrant docs</title><link>https://linzeyan.github.io/zh-tw/notes/docs/vagrant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/vagrant/</guid><description> Vagrantfile template docker Nginx hyperv CentOS7 Win2019 virtualbox Vagrantfile vmware Vagrantfile multi Vagrantfile others common Vagrantfile Metasploitable3 Vagrantfile</description></item><item><title>Zabbix docs</title><link>https://linzeyan.github.io/zh-tw/notes/docs/zabbix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/docs/zabbix/</guid><description>send alert Use Webhook, Create Channel and Webhook in Mattermost, and put script to $(grep AlertScriptsPath /etc/zabbix/zabbix_server.conf). Create Media types in Zabbix(Administration -&amp;gt; Medai types). Add media to user(Administration -&amp;gt; Users -&amp;gt; Media). Create action(Configuration -&amp;gt; Actions -&amp;gt; Trigger actions)。 Debug(Write log in script). Media types: PROBLEM:\nProblem started at {EVENT.TIME} on {EVENT.DATE}\n 問題: {EVENT.NAME}\n 主機: {HOST.NAME}\nSeverity: {EVENT.SEVERITY}\n 目前數值: {EVENT.OPDATA}\n 問題 ID: {EVENT.ID}\n{TRIGGER.URL} RECOVERY:\nProblem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.</description></item><item><title>Array</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/array/</guid><description> array package main import ( &amp;#34;fmt&amp;#34; ) func main() { a := [5]int{1, 2, 3, 4, 5} t := a[3:4:4] fmt.Println(t[0]) } A. 3 B. 4 C. compilation error Answer Try it B</description></item><item><title>Channel</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/channel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/channel/</guid><description>channel package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { ch := make(chan int, 1000) go func() { for i := 0; i &amp;lt; 10; i++ { ch &amp;lt;- i } }() go func() { for { a, ok := &amp;lt;-ch if !ok { fmt.Println(&amp;#34;close&amp;#34;) return } fmt.Println(&amp;#34;a: &amp;#34;, a) } }() close(ch) fmt.Println(&amp;#34;ok&amp;#34;) time.Sleep(time.Second * 100) } Answer Try it ok panic: send on closed channel channel1 package main import ( &amp;#34;fmt&amp;#34; ) func main() { c := make(chan int) close(c) val, _ := &amp;lt;-c fmt.</description></item><item><title>Context</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/context/</guid><description> context package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; ) func f(ctx context.Context) { context.WithValue(ctx, &amp;#34;foo&amp;#34;, -6) } func main() { ctx := context.TODO() f(ctx) fmt.Println(ctx.Value(&amp;#34;foo&amp;#34;)) } A. -6 B. 0 C. &amp;lt;nil&amp;gt; D: panic Answer Try it C context1 package main import( &amp;#34;fmt&amp;#34; &amp;#34;encoding/json&amp;#34; &amp;#34;context&amp;#34; ) func main() { data, _ := json.Marshal(context.WithValue(context.Background(), &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;)) fmt.Println(string(data)) } Answer Try it {"Context":0}</description></item><item><title>Defer</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/defer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/defer/</guid><description>defer package main import ( &amp;#34;fmt&amp;#34; ) func main() { defer_call() } func defer_call() { defer func() { fmt.Println(&amp;#34;1&amp;#34;) }() defer func() { fmt.Println(&amp;#34;2&amp;#34;) }() defer func() { fmt.Println(&amp;#34;3&amp;#34;) }() panic(&amp;#34;4&amp;#34;) } Answer Try it 3 2 1 panic: 4 defer1 package main import ( &amp;#34;fmt&amp;#34; ) type Person struct { age int } func main() { person := &amp;amp;Person{28} defer fmt.Println(person.age) defer func(p *Person) { fmt.Println(p.age) }(person) defer func() { fmt.</description></item><item><title>Goroutine</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/goroutine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/goroutine/</guid><description> goroutine package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { ch1 := make(chan int) go fmt.Println(&amp;lt;-ch1) ch1 &amp;lt;- 5 time.Sleep(1 * time.Second) } A. 5 B. deadlock C. compilation error Answer Try it B</description></item><item><title>Interface</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/interface/</guid><description>interface package main import ( &amp;#34;fmt&amp;#34; ) type People interface { Show() } type Student struct{} func (stu *Student) Show() { } func live() People { var stu *Student return stu } func main() { if live() == nil { fmt.Println(&amp;#34;AAAAAAA&amp;#34;) } else { fmt.Println(&amp;#34;BBBBBBB&amp;#34;) } } Answer Try it BBBBBBB interface1 package main import ( &amp;#34;fmt&amp;#34; ) type People interface { Speak(string) string } type Student struct{} func (stu *Student) Speak(think string) (talk string) { if think == &amp;#34;love&amp;#34; { talk = &amp;#34;You are a good boy&amp;#34; } else { talk = &amp;#34;hi&amp;#34; } return } func main() { var peo People = Student{} think := &amp;#34;love&amp;#34; fmt.</description></item><item><title>Iota</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/iota/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/iota/</guid><description> iota package main import &amp;#34;fmt&amp;#34; const ( x = iota _ y z = &amp;#34;zz&amp;#34; k p = iota ) func main() { fmt.Println(x, y, z, k, p) } Answer Try it 0 2 zz zz 5 iota1 package main import &amp;#34;fmt&amp;#34; const ( a = iota b = iota ) const ( name = &amp;#34;name&amp;#34; c = iota d = iota ) func main() { fmt.Println(a, b, c, d) } Answer Try it 0 1 1 2</description></item><item><title>JSON</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/json/</guid><description>json package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) type AutoGenerated struct { Age int `json:&amp;#34;age&amp;#34;` Name string `json:&amp;#34;name&amp;#34;` Child []int `json:&amp;#34;child&amp;#34;` } func main() { jsonStr1 := `{&amp;#34;age&amp;#34;: 14,&amp;#34;name&amp;#34;: &amp;#34;potter&amp;#34;, &amp;#34;child&amp;#34;:[1,2,3]}` a := AutoGenerated{} json.Unmarshal([]byte(jsonStr1), &amp;amp;a) aa := a.Child fmt.Println(aa) jsonStr2 := `{&amp;#34;age&amp;#34;: 12,&amp;#34;name&amp;#34;: &amp;#34;potter&amp;#34;, &amp;#34;child&amp;#34;:[3,4,5,7,8,9]}` json.Unmarshal([]byte(jsonStr2), &amp;amp;a) fmt.Println(aa) } A. [1 2 3] [1 2 3] B. [1 2 3] [3 4 5] C. [1 2 3] [3 4 5 6 7 8 9] D.</description></item><item><title>Len</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/len/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/len/</guid><description>len package main func main() { var x *struct { s [][32]byte } println(len(x.s[99])) } A. panic B. compilation error C. 32 D. 0 Answer Try it C len1 package main const s = &amp;#34;Go101.org&amp;#34; // len(s) == 9 // 1 &amp;lt;&amp;lt; 9 == 512 // 512 / 128 == 4 var a byte = 1 &amp;lt;&amp;lt; len(s) / 128 var b byte = 1 &amp;lt;&amp;lt; len(s[:]) / 128 func main() { println(a, b) } A: 0 0 B: 0 4 C: 4 0 D: 4 4 Answer Try it C len2 package main var s = &amp;#34;Go101.</description></item><item><title>Map</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/map/</guid><description> map package main import &amp;#34;fmt&amp;#34; type Student struct { Name string } var list map[string]Student func main() { list = make(map[string]Student) student := Student{&amp;#34;Aceld&amp;#34;} list[&amp;#34;student&amp;#34;] = student list[&amp;#34;student&amp;#34;].Name = &amp;#34;LDB&amp;#34; fmt.Println(list[&amp;#34;student&amp;#34;]) } Answer Try it compilation error cannot assign to struct field list["student"].Name in map map1 package main func main() { m := make(map[int]int, 3) x := len(m) m[1] = m[1] y := len(m) println(x, y) } Answer Try it 0 1</description></item><item><title>Print</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/print/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/print/</guid><description> print package main import &amp;#34;fmt&amp;#34; type T struct { x int } func (t T) String() string { return &amp;#34;boo&amp;#34; } func main() { t := T{123} fmt.Printf(&amp;#34;%v\n&amp;#34;, t) fmt.Printf(&amp;#34;%#v\n&amp;#34;, t) } Answer Try it boo main.T{x:123} print1 package main import ( &amp;#34;fmt&amp;#34; ) func f(a ...int) { fmt.Printf(&amp;#34;%#v\n&amp;#34;, a) } func main() { f() } Answer Try it []int(nil)</description></item><item><title>Race</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/race/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/race/</guid><description> race type Stats struct { mutex sync.Mutex counters map[string]int } func (s *Stats) Snapshot() map[string]int { s.mutex.Lock() defer s.mutex.Unlock() return s.counters } func (s *Stats) Add(name string, num int) { s.mutex.Lock() defer s.mutex.Unlock() s.counters[name] = num } Answer func (s *Stats) Snapshot() map[string]int { s.mutex.Lock() defer s.mutex.Unlock() result := make(map[string]int, len(s.counters)) for k, v := range s.counters { result[k] = v } return result }</description></item><item><title>Select</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/select/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/select/</guid><description>select package main import &amp;#34;sync&amp;#34; func main() { var wg sync.WaitGroup foo := make(chan int) bar := make(chan int) wg.Add(1) go func() { defer wg.Done() select { case foo &amp;lt;- &amp;lt;-bar: default: println(&amp;#34;default&amp;#34;) } }() wg.Wait() } Answer Try it fatal error: all goroutines are asleep - deadlock! select1 package main import &amp;#34;fmt&amp;#34; func main() { ch1 := make(chan int) ch2 := make(chan int) go func() { ch1 &amp;lt;- 1 }() go func() { select { case &amp;lt;-ch1: case ch2 &amp;lt;- 2: } }() fmt.</description></item><item><title>Slice</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/slice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/slice/</guid><description>slice package main import ( &amp;#34;fmt&amp;#34; ) func main() { var s1 []int var s2 = []int{} if __ == nil { fmt.Println(&amp;#34;nil slice&amp;#34;) } if __ != nil { fmt.Println(&amp;#34;empty slice&amp;#34;) } } A. s1, s2 B. s2, s1 C. s1, s1 D. s2, s2 Answer Try it A slice1 package main import ( &amp;#34;fmt&amp;#34; ) func main() { s := [3]int{1, 2, 3} a := s[:0] b := s[:2] c := s[1:2:cap(s)] fmt.</description></item><item><title>Variable</title><link>https://linzeyan.github.io/zh-tw/notes/go/questions/variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/go/questions/variable/</guid><description>variable A. p.name B. (&amp;amp;p).name C. (*p).name D. p-&amp;gt;name Answer AC variable1 package main import ( &amp;#34;fmt&amp;#34; ) func main() { var ans float64 = 15 + 25 + 5.2 fmt.Println(ans) } A. 45 B. 45.0 C. 45.2 D. compliation error Answer Try it C variable2 package main import ( &amp;#34;fmt&amp;#34; ) func main() { var ans float64 = 3 / 2 fmt.Println(ans) } A. 1.5 B. 1 C. 0 D.</description></item></channel></rss>