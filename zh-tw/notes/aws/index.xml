<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS Notes on Ricky</title><link>https://linzeyan.github.io/zh-tw/notes/aws/</link><description>Recent content in AWS Notes on Ricky</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><atom:link href="https://linzeyan.github.io/zh-tw/notes/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS Command</title><link>https://linzeyan.github.io/zh-tw/notes/aws/command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/aws/command/</guid><description>CloudFront # list distributions aws cloudfront list-distributions --query &amp;#39;*.Items[*].[Comment,Id,Aliases.Items[0],DefaultCacheBehavior.TargetOriginId]&amp;#39; --output table # create invalidation aws cloudfront create-invalidation --distribution-id EATDVGD171BHDS1 --paths &amp;#34;/*&amp;#34; ## check cloudfornt log enable or not for i in $(aws cloudfront list-distributions --output table --query &amp;#39;DistributionList.Items[*].Id&amp;#39; --profile route53 | sed &amp;#39;1,3d;$d&amp;#39; | awk &amp;#39;{print $2}&amp;#39;) do result=$(aws cloudfront get-distribution --id ${i} --query &amp;#39;Distribution.DistributionConfig.Logging&amp;#39; --profile route53 | jq .Enabled) if [[ &amp;#34;${result}&amp;#34; != &amp;#34;true&amp;#34; ]];then echo ${i} fi done EC2 # list aws ec2 describe-instances --query &amp;#39;Reservations[*].</description></item><item><title>AWS Configure</title><link>https://linzeyan.github.io/zh-tw/notes/aws/configure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/aws/configure/</guid><description> S3 Bucket Policy { &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;, &amp;#34;Statement&amp;#34;: [ { &amp;#34;Sid&amp;#34;: &amp;#34;AllowPublicRead&amp;#34;, &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;, &amp;#34;Principal&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;Action&amp;#34;: &amp;#34;s3:GetObject&amp;#34;, &amp;#34;Resource&amp;#34;: &amp;#34;arn:aws:s3:::bucketName/*&amp;#34; } ] } S3 CORS [ { &amp;#34;AllowedHeaders&amp;#34;: [&amp;#34;*&amp;#34;], &amp;#34;AllowedMethods&amp;#34;: [&amp;#34;GET&amp;#34;, &amp;#34;PUT&amp;#34;, &amp;#34;POST&amp;#34;, &amp;#34;DELETE&amp;#34;], &amp;#34;AllowedOrigins&amp;#34;: [&amp;#34;*&amp;#34;], &amp;#34;ExposeHeaders&amp;#34;: [ &amp;#34;x-amz-server-side-encryption&amp;#34;, &amp;#34;x-amz-request-id&amp;#34;, &amp;#34;x-amz-id-2&amp;#34; ], &amp;#34;MaxAgeSeconds&amp;#34;: 3000 } ] ECR Lifecycle Policy { &amp;#34;rules&amp;#34;: [ { &amp;#34;rulePriority&amp;#34;: 1, &amp;#34;description&amp;#34;: &amp;#34;Keep only the last 100 images&amp;#34;, &amp;#34;selection&amp;#34;: { &amp;#34;tagStatus&amp;#34;: &amp;#34;any&amp;#34;, &amp;#34;countType&amp;#34;: &amp;#34;imageCountMoreThan&amp;#34;, &amp;#34;countNumber&amp;#34;: 100 }, &amp;#34;action&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;expire&amp;#34; } } ] } ECR Lifecycle Policy1 { &amp;#34;rules&amp;#34;: [ { &amp;#34;rulePriority&amp;#34;: 1, &amp;#34;description&amp;#34;: &amp;#34;Remove images with certain tag&amp;#34;, &amp;#34;selection&amp;#34;: { &amp;#34;tagStatus&amp;#34;: &amp;#34;tagged&amp;#34;, &amp;#34;tagPrefixList&amp;#34;: [&amp;#34;tag1&amp;#34;, &amp;#34;tag2&amp;#34;], &amp;#34;countType&amp;#34;: &amp;#34;imageCountMoreThan&amp;#34;, &amp;#34;countNumber&amp;#34;: 0 }, &amp;#34;action&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;expire&amp;#34; } } ] } ECR Lifecycle Policy2 { &amp;#34;rules&amp;#34;: [ { &amp;#34;rulePriority&amp;#34;: 1, &amp;#34;description&amp;#34;: &amp;#34;Remove untagged images older than 14 days&amp;#34;, &amp;#34;selection&amp;#34;: { &amp;#34;tagStatus&amp;#34;: &amp;#34;untagged&amp;#34;, &amp;#34;countType&amp;#34;: &amp;#34;sinceImagePushed&amp;#34;, &amp;#34;countUnit&amp;#34;: &amp;#34;days&amp;#34;, &amp;#34;countNumber&amp;#34;: 14 }, &amp;#34;action&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;expire&amp;#34; } } ] }</description></item><item><title>AWS Terraform</title><link>https://linzeyan.github.io/zh-tw/notes/aws/terraform/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linzeyan.github.io/zh-tw/notes/aws/terraform/</guid><description> tf Provider provider.tf EC2 ec2.tf initial.bash Elastic IP elasticip.tf MQ mq.tf RDS rds.tf Security Group sg.tf VPC vpc.tf WAF waf.tf</description></item></channel></rss>